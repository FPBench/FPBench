;; -*- mode: scheme -*-

;; From the FPTaylor project <https://github.com/soarlab/FPTaylor>,
;; all `*.txt` files in the directory `benchmarks/real2float/`.
;; Note that the many are duplicates of benchmarks from Rosa,
;; and those are not represented here (see rosa.fpcore instead).

(FPCore (x)
 :name "logexp"
 :cite (solovyev-et-al-2015)
 :precision binary64
 :pre (<= -8 x 8)
 (let ([e (exp x)])
   (log (+ 1 e))))

(FPCore (x r lat lon)
 :name "sphere"
 :cite (solovyev-et-al-2015)
 :precision binary64
 :pre (and (<= -10 x 10) (<= 0 r 10)
           (<= -1.570796 lat 1.570796) (<= -3.14159265 lon 3.14159265))
 (let ([sinLat (sin lat)] [cosLon (cos lon)])
   (+ x (* (* r sinLat) cosLon))))

(FPCore (lat1 lat2  lon1 lon2)
 :name "azimuth"
 :cite (solovyev-et-al-2015)
 :precision binary64
 :pre (and (<= 0 lat1 0.4) (<= 0.5 lat2 1)
           (<= 0 lon1 3.14159265) (<= -3.14159265 lon2 -0.5))
 (let ([dLon (- lon2 lon1)])
   (let ([s_lat1 (sin lat1)] [c_lat1 (cos lat1)]
         [s_lat2 (sin lat2)] [c_lat2 (cos lat2)]
         [s_dLon (sin dLon)] [c_dLon (cos dLon)])
     (atan
      (/ (* c_lat2 s_dLon)
         (- (* c_lat1 s_lat2) (* (* s_lat1 c_lat2) c_dLon)))))))

;; The remainder are not used in solovyev-et-al-2015, but are present
;; in the repository. The _fp variants use mixed real/float
;; operations, so are skipped.

(FPCore (x1 x2 x3 x4 x5 x6)
 :name "floudas1"
 :precision binary64
 :pre (and (<= 0 x1 6) (<= 0 x2 6) (<= 1 x3 5)
           (<= 0 x4 6) (<= 0 x5 6) (<= 0 x6 10)
           (>= (- (+ (* (- x3 3) (- x3 3)) x4) 4) 0)
           (>= (- (+ (* (- x5 3) (- x5 3)) x6) 4) 0)
           (>= (+ (- 2 x1) (* 3 x2)) 0)
           (>= (- (+ 2 x1) x2) 0)
           (>= (- (- 6 x1) x2) 0)
           (>= (- (+ x1 x2) 2) 0))
 (- (- (- (- (- (* -25 (* (- x1 2) (- x1 2))) (* (- x2 2) (- x2 2))) (* (- x3 1) (- x3 1))) (* (- x4 4) (- x4 4))) (* (- x5 1) (- x5 1))) (* (- x6 4) (- x6 4))))

(FPCore (x1 x2)
 :name "floudas2"
 :precision binary64
 :pre (and (<= 0 x1 3) (<= 0 x2 4)
           (>= (- (+ (- (* 2 (* (* x1 x1) (* x1 x1))) (* (* 8 (* x1 x1)) x1)) (* (* 8 x1) x1)) x2) 0)
           (>= (- (+ (- (+ (- (* 4 (* (* x1 x1) (* x1 x1))) (* (* 32 (* x1 x1)) x1)) (* (* 88 x1) x1)) (* 96 x1)) 36) x2) 0))
 (- (- x1) x2))

(FPCore (x1 x2)
 :name "floudas3"
 :precision binary64
 :pre (and (<= 0 x1 2) (<= 0 x2 3) (>= (- (+ (* -2 (* (* x1 x2) (* x1 x1))) 2) x2)))
 (+ (- (* -12 x1) (* 7 x2)) (* x2 x2)))

(FPCore (x1 x2 x3)
 :name "hartman3"
 :precision binary64
 :pre (and (<= 0 x1 1) (<= 0 x2 1) (<= 0 x3 1))
 (let ([e1 (+ (+ (* 3.0 (* (- x1 0.3689) (- x1 0.3689)))
                 (* 10.0 (* (- x2 0.117) (- x2 0.117))))
              (* 30.0 (* (- x3 0.2673) (- x3 0.2673))))]
       [e2 (+ (+ (* 0.1 (* (- x1 0.4699) (- x1 0.4699)))
                 (* 10.0 (* (- x2 0.4387) (- x2 0.4387))))
              (* 35.0 (* (- x3 0.747) (- x3 0.747))))]
       [e3 (+ (+ (* 3.0 (* (- x1 0.1091) (- x1 0.1091)))
                 (* 10.0 (* (- x2 0.8732) (- x2 0.8732))))
              (* 30.0 (* (- x3 0.5547) (- x3 0.5547))))]
       [e4 (+ (+ (* 0.1 (* (- x1 0.03815) (- x1 0.03815)))
                 (* 10.0 (* (- x2 0.5743) (- x2 0.5743))))
              (* 35.0 (* (- x3 0.8828) (- x3 0.8828))))])
   (let ([exp1 (exp (- e1))] [exp2 (exp (- e2))]
         [exp3 (exp (- e3))] [exp4 (exp (- e4))])
     (- (+ (+ (+ (* 1.0 exp1) (* 1.2 exp2))
              (* 3.0 exp3)) (* 3.2 exp4))))))

(FPCore (x1 x2 x3 x4 x5 x6)
 :name "hartman6"
 :precision binary64
 :pre (and (<= 0 x1 1) (<= 0 x2 1) (<= 0 x3 1) (<= 0 x4 1) (<= 0 x5 1) (<= 0 x6 1))
 (let ([e1
        (+ (+ (+ (+ (+ (* 10.0 (* (- x1 0.1312) (- x1 0.1312))) (* 3.0 (* (- x2 0.1696) (- x2 0.1696))))
                    (* 17.0 (* (- x3 0.5569) (- x3 0.5569)))) (* 3.5 (* (- x4 0.0124) (- x4 0.0124))))
              (* 1.7 (* (- x5 0.8283) (- x5 0.8283)))) (* 8.0 (* (- x6 0.5886) (- x6 0.5886))))]
       [e2
        (+ (+ (+ (+ (+ (* 0.05 (* (- x1 0.2329) (- x1 0.2329))) (* 10.0 (* (- x2 0.4135) (- x2 0.4135))))
                    (* 17.0 (* (- x3 0.8307) (- x3 0.8307)))) (* 0.1 (* (- x4 0.3736) (- x4 0.3736))))
              (* 8.0 (* (- x5 0.1004) (- x5 0.1004)))) (* 14.0 (* (- x6 0.9991) (- x6 0.9991))))]
       [e3
        (+ (+ (+ (+ (+ (* 3.0 (* (- x1 0.2348) (- x1 0.2348))) (* 3.5 (* (- x2 0.1451) (- x2 0.1451))))
                    (* 1.7 (* (- x3 0.3522) (- x3 0.3522)))) (* 10.0 (* (- x4 0.2883) (- x4 0.2883))))
              (* 17.0 (* (- x5 0.3047) (- x5 0.3047)))) (* 8.0 (* (- x6 0.665) (- x6 0.665))))]
       [e4
        (+ (+ (+ (+ (+ (* 17.0 (* (- x1 0.4047) (- x1 0.4047))) (* 8.0 (* (- x2 0.8828) (- x2 0.8828))))
                    (* 0.05 (* (- x3 0.8732) (- x3 0.8732)))) (* 10.0 (* (- x4 0.5743) (- x4 0.5743))))
              (* 0.1 (* (- x5 0.1091) (- x5 0.1091)))) (* 14.0 (* (- x6 0.0381) (- x6 0.0381))))])
   (let ([exp1 (exp (- e1))] [exp2 (exp (- e2))]
         [exp3 (exp (- e3))] [exp4 (exp (- e4))])
     (- (+ (+ (+ (* 1.0 exp1) (* 1.2 exp2))
              (* 3.0 exp3)) (* 3.2 exp4))))))

(FPCore (x1 x2 x3 x4 x5 x6)
 :name "kepler0"
 :precision binary64
 :pre (and (<= 4 x1 6.36) (<= 4 x2 6.36) (<= 4 x3 6.36) (<= 4 x4 6.36) (<= 4 x5 6.36) (<= 4 x6 6.36))
 (+ (- (- (+ (* x2 x5) (* x3 x6)) (* x2 x3)) (* x5 x6))
    (* x1 (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6))))

(FPCore (x1 x2 x3 x4 x5)
 :name "kepler1"
 :precision binary64
 :pre (and (<= 4 x1 6.36) (<= 4 x2 6.36) (<= 4 x3 6.36) (<= 4 x4 6.36))
 (- (- (- (- (+ (+ (* (* x1 x4) (- (+ (+ (- x1) x2) x3) x4))
                   (* x2 (+ (+ (- x1 x2) x3) x4)))
                (* x3 (+ (- (+ x1 x2) x3) x4)))
             (* (* x2 x3) x4))
          (* x1 x3))
       (* x1 x2))
    x4))

(FPCore (x1 x2 x3 x4 x5 x6)
 :name "kepler2"
 :precision binary64
 :pre (and (<= 4 x1 6.36) (<= 4 x2 6.36) (<= 4 x3 6.36)
           (<= 4 x4 6.36) (<= 4 x5 6.36) (<= 4 x6 6.36))
 (- (- (- (- (+ (+ (* (* x1 x4) (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6))
                   (* (* x2 x5) (+ (- (+ (+ (- x1 x2) x3) x4) x5) x6)))
                (* (* x3 x6) (- (+ (+ (- (+ x1 x2) x3) x4) x5) x6)))
             (* (* x2 x3) x4))
          (* (* x1 x3) x5))
       (* (* x1 x2) x6))
    (* (* x4 x5) x6)))
