;; -*- mode: scheme -*-

(FPCore (sr* sl*)
 :name "Odometry"
 :description "Compute the position of a robot from the speed of the wheels.
Inputs: Speed `sl`, `sr` of the left and right wheel, in rad/s."
 :cite (damouche-martel-chapoutot-fmics15)
 :fpbench-domain controls
 :precision binary32
 :pre (and (< 0.05 sl* (* 2 PI)) (< 0.05 sr* (* 2 PI)))
 :example ([sr* 0.0785398163397] [sl* 0.0525398163397])
 (let ([inv_l 0.1] [c 12.34])
   (while* (< t 1000)
     ([delta_dl 0.0 (* c sl)]
      [delta_dr 0.0 (* c sr)]
      [delta_d  0.0 (* (+ delta_dl delta_dr) 0.5)]
      [delta_theta 0.0 (* (- delta_dr delta_dl) inv_l)]
      [arg  0.0 (+ theta (* delta_theta 0.5))]
      ;; cos
      [cosi 0.0 (+ (- 1 (* (* arg arg) 0.5)) (* (* (* (* arg arg) arg) arg) 0.0416666666))]
      [x 0.0 (+ x (* delta_d cosi))]
      ;; sin
      [sini 0.0 (+ (- arg (* (* (* arg arg) arg) 0.1666666666))
                   (* (* (* (* (* arg arg) arg) arg) arg) 0.008333333))]
      [y 0.0 (+ y (* delta_d sini))]
      [theta -.985 (+ theta delta_theta)]
      [t 0 (+ t 1)]
      [tmp sl* sl]
      [sl sl* (if (== j 50) sr sl)]
      [sr sr* (if (== j 50) tmp sr)]
      [j (if (== j 50) 0 (+ j 1))])
     x))) ;; `y` is also an output but is skipped for now

(FPCore (m kp ki kd c)
 :name "PID"
 :description "Keep a measure at its setpoint using a PID controller.
Inputs: Measure `m`; gains `kp`, `ki`, `kd`; setpoint `c`"
 :cite (damouche-martel-chapoutot-nsv14 damouche-martel-chapoutot-fmics15)
 :fpbench-domain controls
 :precision binary64
 :pre (and (< -10.0 m 10.0) (< -10.0 c 10.0))
 :example ([m -5.0] [kp 9.4514] [ki 0.69006] [kd 2.8454])
 (let* ([dt 0.5] [invdt (/ 1 dt)])
   (while* (< t 100.0)
     ([e 0.0 (- c m)]
      [p 0.0 (* kp e)]
      [i 0.0 (+ i (* (* ki dt) e))]
      [d 0.0 (* (* kd invdt) (- e eold))]
      [r 0.0 (+ (+ p i) d)]
      [m m (+ m (* 0.01 r))]
      [eold 0.0 e]
      [t 0.0 (+ t dt)])
     m)))

(FPCore (h y_n* c)
 :name "Runge-Kutta 4"
 :description "Solve the differential equation `y' = (c - y)^2
Inputs: Step size `h`; initial condition `y_n*`; paramter `c`"
 :cite (damouche-martel-chapoutot-fmics15)
 :fpbench-domain mathematics
 :precision binary32
 :pre (and (< 0 y_n* 100) (< 10e-6 h 0.1) (< 50 c 200))
 :example ([h 0.1] [y_n* 10.1] [c 100.1])
 (let ([sixieme (/ 1 6)] [eps 0.005] [k 1.2])
   (while (> e eps)
     ([y_n
       y_n*
       (let* ([k1 (let ([v (- c y_n)]) (* (* k v) v))]
              [k2 (let ([v (- c (+ y_n (* (* 0.5 h) k1)))]) (* (* k v) v))]
              [k3 (let ([v (- c (+ y_n (* (* 0.5 h) k2)))]) (* (* k v) v))]
              [k4 (let ([v (- c (+ y_n (* h k3)))]) (* (* k v) v))])
         (+ y_n (* (* sixieme h) (+ (+ (+ k1 (* 2.0 k2)) (* 2.0 k3)) k4))))]
      [i 0.0 (+ i 1.0)]
      [e 1.0 (- e eps)])
     (fabs e)))) ;; `i` is also an output but is skipped for now

(FPCore (y yd)
 :name "Lead-lag System"
 :description "Move a mass from an initial position to a desired position.
Inputs: Initial position `y`; desired position `yd`"
 :cite (feron-ieee10 damouche-martel-chapoutot-fmics15)
 :fpbench-domain controls
 :precision binary32
 :pre (and (< 0 yd 50) (< 0 y 50))
 :example ([y 2.5] [yd 5.0])
 (let ([eps 0.01] [Dc -1280.0]
       [Ac00 .499] [Ac01 -.05] [Ac10 .010] [Ac11 1.00]
       [Bc0 1.0] [Bc1 0.0] [Cc0 564.48] [Cc1 0.0])
   (while* (> e eps)
     ([yc  0.0 (let ([v (- y yd)]) (if (< v -1.0) -1.0 (if (< 1.0 v) 1.0 v)))]
      [u   0.0 (+ (* Cc0 xc0) (+ (* Cc1 xc1) (* Dc yc)))]
      [xc0 0.0 (+ (* Ac00 xc0) (+ (* Ac01 xc1) (* Bc0 yc)))]
      [xc1 0.0 (+ (* Ac10 xc0) (+ (* Ac11 xc1) (* Bc1 yc)))]
      [i   0.0 (+ i 1.0)]
      [e   1.0 (fabs (- yc xc1))])
     xc1)))

(FPCore (u)
 :name "Trapeze"
 :cite (damouche-martel-chapoutot-fmics15)
 :fpbench-domain mathematics
 :pre (<= 1.11 u 2.22)
 (let* ([a 0.25] [b 5000] [n 25] [h (/ (- b a) n)])
   (while* (< xa 5000)
     ([xb 0 (let ([v (+ xa h)]) (if (> v 5000) 5000 v))]
      [r
       0
       (let ([gxa (/ u (- (+ (- (* (* (* 0.7 xa) xa) xa) (* (* 0.6 xa) xa)) (* 0.9 xa)) 0.2))]
             [gxb (/ u (- (+ (- (* (* (* 0.7 xb) xb) xb) (* (* 0.6 xb) xb)) (* 0.9 xb)) 0.2))])
         (+ r (* (* (+ gxa gxb) 0.5) h)))]
      [xa  0.25 (+ xa h)])
     r)))
