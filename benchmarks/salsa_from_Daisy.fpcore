;; Taken from
;; Damouche, Nasrine, Matthieu Martel, and Alexandre Chapoutot.
;; "Numerical Accuracy Improvement by Interprocedural Program Transformation."
;; Proceedings of the 20th International Workshop on Software and Compilers for
;; Embedded Systems. ACM, 2017.

;; Taken from
(FPCore ( sl  sr )
:name "odometryX1"
  :pre (and( <= 0.52 sl)( <= sl 0.53)( <= 0.785398163397 sr)( <= sr 0.785398163397))
  (let ([theta 0.0])
    (let ([x 0.0])
      (let ([inv_l 0.1])
        (let ([c 12.34])
          (let ([delta_dl ( * c sl)])
            (let ([delta_dr ( * c sr)])
              (let ([delta_d ( * ( + delta_dl delta_dr) 0.5)])
                (let ([delta_theta ( * ( - delta_dr delta_dl) inv_l)])
                  (let ([arg ( + theta ( * delta_theta 0.5))])
                    (let ([cos ( + ( - 1.0 ( * ( * arg arg) 0.5)) ( / ( * ( * ( * arg arg) arg) arg) 24.0))])
                      ( + x ( * delta_d cos))))))))))))
)

(FPCore ( sl  sr )
:name "odometryY1"
  :pre (and( <= 0.52 sl)( <= sl 0.53)( <= 0.785398163397 sr)( <= sr 0.785398163397))
  (let ([theta 0.0])
    (let ([y 0.0])
      (let ([inv_l 0.1])
        (let ([c 12.34])
          (let ([delta_dl ( * c sl)])
            (let ([delta_dr ( * c sr)])
              (let ([delta_d ( * ( + delta_dl delta_dr) 0.5)])
                (let ([delta_theta ( * ( - delta_dr delta_dl) inv_l)])
                  (let ([arg ( + theta ( * delta_theta 0.5))])
                    (let ([sin ( + ( - arg ( / ( * ( * arg arg) arg) 6.0)) ( / ( * ( * ( * ( * arg arg) arg) arg) arg) 120.0))])
                      ( + y ( * delta_d sin))))))))))))
)

(FPCore ( sl  sr )
:name "odometryX3"
  :pre (and( <= 0.52 sl)( <= sl 0.53)( <= 0.785398163397 sr)( <= sr 0.785398163397))
  (let ([theta0 0.0])
    (let ([x0 0.0])
      (let ([inv_l 0.1])
        (let ([c 12.34])
          (let ([delta_dl ( * c sl)])
            (let ([delta_dr ( * c sr)])
              (let ([delta_d ( * ( + delta_dl delta_dr) 0.5)])
                (let ([delta_theta ( * ( - delta_dr delta_dl) inv_l)])
                  (let ([arg1 ( + theta0 ( * delta_theta 0.5))])
                    (let ([cos1 ( + ( - 1.0 ( * ( * arg1 arg1) 0.5)) ( / ( * ( * ( * arg1 arg1) arg1) arg1) 24.0))])
                      (let ([x1 ( + x0 ( * delta_d cos1))])
                        (let ([theta1 ( + theta0 delta_theta)])
                          (let ([arg2 ( + theta1 ( * delta_theta 0.5))])
                            (let ([cos2 ( + ( - 1.0 ( * ( * arg2 arg2) 0.5)) ( / ( * ( * ( * arg2 arg2) arg2) arg2) 24.0))])
                              (let ([x2 ( + x1 ( * delta_d cos2))])
                                (let ([theta2 ( + theta1 delta_theta)])
                                  (let ([arg3 ( + theta2 ( * delta_theta 0.5))])
                                    (let ([cos3 ( + ( - 1.0 ( * ( * arg3 arg3) 0.5)) ( / ( * ( * ( * arg3 arg3) arg3) arg3) 24.0))])
                                      ( + x2 ( * delta_d cos3))))))))))))))))))))
)

(FPCore ( sl  sr )
:name "odometryY3"
  :pre (and( <= 0.52 sl)( <= sl 0.53)( <= 0.785398163397 sr)( <= sr 0.785398163397))
  (let ([theta0 0.0])
    (let ([y0 0.0])
      (let ([inv_l 0.1])
        (let ([c 12.34])
          (let ([delta_dl ( * c sl)])
            (let ([delta_dr ( * c sr)])
              (let ([delta_d ( * ( + delta_dl delta_dr) 0.5)])
                (let ([delta_theta ( * ( - delta_dr delta_dl) inv_l)])
                  (let ([arg1 ( + theta0 ( * delta_theta 0.5))])
                    (let ([sin1 ( + ( - arg1 ( / ( * ( * arg1 arg1) arg1) 6.0)) ( / ( * ( * ( * ( * arg1 arg1) arg1) arg1) arg1) 120.0))])
                      (let ([y1 ( + y0 ( * delta_d sin1))])
                        (let ([theta1 ( + theta0 delta_theta)])
                          (let ([arg2 ( + theta1 ( * delta_theta 0.5))])
                            (let ([sin2 ( + ( - arg2 ( / ( * ( * arg2 arg2) arg2) 6.0)) ( / ( * ( * ( * ( * arg2 arg2) arg2) arg2) arg2) 120.0))])
                              (let ([y2 ( + y1 ( * delta_d sin2))])
                                (let ([theta2 ( + theta1 delta_theta)])
                                  (let ([arg3 ( + theta2 ( * delta_theta 0.5))])
                                    (let ([sin3 ( + ( - arg3 ( / ( * ( * arg3 arg3) arg3) 6.0)) ( / ( * ( * ( * ( * arg3 arg3) arg3) arg3) arg3) 120.0))])
                                      ( + y2 ( * delta_d sin3))))))))))))))))))))
)

(FPCore ( sl  sr )
:name "odometryX5"
  :pre (and( <= 0.52 sl)( <= sl 0.53)( <= 0.785398163397 sr)( <= sr 0.785398163397))
  (let ([theta0 0.0])
    (let ([x0 0.0])
      (let ([inv_l 0.1])
        (let ([c 12.34])
          (let ([delta_dl ( * c sl)])
            (let ([delta_dr ( * c sr)])
              (let ([delta_d ( * ( + delta_dl delta_dr) 0.5)])
                (let ([delta_theta ( * ( - delta_dr delta_dl) inv_l)])
                  (let ([arg1 ( + theta0 ( * delta_theta 0.5))])
                    (let ([cos1 ( + ( - 1.0 ( * ( * arg1 arg1) 0.5)) ( / ( * ( * ( * arg1 arg1) arg1) arg1) 24.0))])
                      (let ([x1 ( + x0 ( * delta_d cos1))])
                        (let ([theta1 ( + theta0 delta_theta)])
                          (let ([arg2 ( + theta1 ( * delta_theta 0.5))])
                            (let ([cos2 ( + ( - 1.0 ( * ( * arg2 arg2) 0.5)) ( / ( * ( * ( * arg2 arg2) arg2) arg2) 24.0))])
                              (let ([x2 ( + x1 ( * delta_d cos2))])
                                (let ([theta2 ( + theta1 delta_theta)])
                                  (let ([arg3 ( + theta2 ( * delta_theta 0.5))])
                                    (let ([cos3 ( + ( - 1.0 ( * ( * arg3 arg3) 0.5)) ( / ( * ( * ( * arg3 arg3) arg3) arg3) 24.0))])
                                      (let ([x3 ( + x2 ( * delta_d cos3))])
                                        (let ([theta3 ( + theta2 delta_theta)])
                                          (let ([arg4 ( + theta3 ( * delta_theta 0.5))])
                                            (let ([cos4 ( + ( - 1.0 ( * ( * arg4 arg4) 0.5)) ( / ( * ( * ( * arg4 arg4) arg4) arg4) 24.0))])
                                              (let ([x4 ( + x3 ( * delta_d cos4))])
                                                (let ([theta4 ( + theta3 delta_theta)])
                                                  (let ([arg5 ( + theta4 ( * delta_theta 0.5))])
                                                    (let ([cos5 ( + ( - 1.0 ( * ( * arg5 arg5) 0.5)) ( / ( * ( * ( * arg5 arg5) arg5) arg5) 24.0))])
                                                      ( + x4 ( * delta_d cos5))))))))))))))))))))))))))))
)

(FPCore ( sl  sr )
:name "odometryY5"
  :pre (and( <= 0.52 sl)( <= sl 0.53)( <= 0.785398163397 sr)( <= sr 0.785398163397))
  (let ([theta0 0.0])
    (let ([y0 0.0])
      (let ([inv_l 0.1])
        (let ([c 12.34])
          (let ([delta_dl ( * c sl)])
            (let ([delta_dr ( * c sr)])
              (let ([delta_d ( * ( + delta_dl delta_dr) 0.5)])
                (let ([delta_theta ( * ( - delta_dr delta_dl) inv_l)])
                  (let ([arg1 ( + theta0 ( * delta_theta 0.5))])
                    (let ([sin1 ( + ( - arg1 ( / ( * ( * arg1 arg1) arg1) 6.0)) ( / ( * ( * ( * ( * arg1 arg1) arg1) arg1) arg1) 120.0))])
                      (let ([y1 ( + y0 ( * delta_d sin1))])
                        (let ([theta1 ( + theta0 delta_theta)])
                          (let ([arg2 ( + theta1 ( * delta_theta 0.5))])
                            (let ([sin2 ( + ( - arg2 ( / ( * ( * arg2 arg2) arg2) 6.0)) ( / ( * ( * ( * ( * arg2 arg2) arg2) arg2) arg2) 120.0))])
                              (let ([y2 ( + y1 ( * delta_d sin2))])
                                (let ([theta2 ( + theta1 delta_theta)])
                                  (let ([arg3 ( + theta2 ( * delta_theta 0.5))])
                                    (let ([sin3 ( + ( - arg3 ( / ( * ( * arg3 arg3) arg3) 6.0)) ( / ( * ( * ( * ( * arg3 arg3) arg3) arg3) arg3) 120.0))])
                                      (let ([y3 ( + y2 ( * delta_d sin3))])
                                        (let ([theta3 ( + theta2 delta_theta)])
                                          (let ([arg4 ( + theta3 ( * delta_theta 0.5))])
                                            (let ([sin4 ( + ( - arg4 ( / ( * ( * arg4 arg4) arg4) 6.0)) ( / ( * ( * ( * ( * arg4 arg4) arg4) arg4) arg4) 120.0))])
                                              (let ([y4 ( + y3 ( * delta_d sin4))])
                                                (let ([theta4 ( + theta3 delta_theta)])
                                                  (let ([arg5 ( + theta4 ( * delta_theta 0.5))])
                                                    (let ([sin5 ( + ( - arg5 ( / ( * ( * arg5 arg5) arg5) 6.0)) ( / ( * ( * ( * ( * arg5 arg5) arg5) arg5) arg5) 120.0))])
                                                      ( + y4 ( * delta_d sin5))))))))))))))))))))))))))))
)


(FPCore ( m_0 )
:name "pid1"
  :pre (and( <= 4.5 m_0)( <= m_0 9.0))
  (let ([ki 0.69006])
    (let ([kp 9.4514])
      (let ([kd 2.8454])
        (let ([i_0 0.0])
          (let ([c 5.0])
            (let ([dt 0.2])
              (let ([invdt 5.0])
                (let ([eold 0.0])
                  (let ([e_1 ( - c m_0)])
                    (let ([p_1 ( * kp e_1)])
                      (let ([i_1 ( + i_0 ( * ( * ki dt) e_1))])
                        (let ([d_1 ( * ( * kd invdt) ( - e_1 eold))])
                          (let ([r_1 ( + ( + p_1 i_1) d_1)])
                            ( + m_0 ( * 0.01 r_1)))))))))))))))
)

(FPCore ( m_0 )
:name "pid3"
  :pre (and( <= 4.5 m_0)( <= m_0 9.0))
  (let ([ki 0.69006])
    (let ([kp 9.4514])
      (let ([kd 2.8454])
        (let ([i_0 0.0])
          (let ([c 5.0])
            (let ([dt 0.2])
              (let ([invdt 5.0])
                (let ([eold_0 0.0])
                  (let ([e_1 ( - c m_0)])
                    (let ([p_1 ( * kp e_1)])
                      (let ([i_1 ( + i_0 ( * ( * ki dt) e_1))])
                        (let ([d_1 ( * ( * kd invdt) ( - e_1 eold_0))])
                          (let ([r_1 ( + ( + p_1 i_1) d_1)])
                            (let ([m_1 ( + m_0 ( * 0.01 r_1))])
                              (let ([eold_1 e_1])
                                (let ([e_2 ( - c m_1)])
                                  (let ([p_2 ( * kp e_2)])
                                    (let ([i_2 ( + i_1 ( * ( * ki dt) e_2))])
                                      (let ([d_2 ( * ( * kd invdt) ( - e_2 eold_1))])
                                        (let ([r_2 ( + ( + p_2 i_2) d_2)])
                                          (let ([m_2 ( + m_1 ( * 0.01 r_2))])
                                            (let ([eold_2 e_2])
                                              (let ([e_3 ( - c m_2)])
                                                (let ([p_3 ( * kp e_3)])
                                                  (let ([i_3 ( + i_2 ( * ( * ki dt) e_3))])
                                                    (let ([d_3 ( * ( * kd invdt) ( - e_3 eold_2))])
                                                      (let ([r_3 ( + ( + p_3 i_3) d_3)])
                                                        ( + m_2 ( * 0.01 r_3)))))))))))))))))))))))))))))
)

(FPCore ( m_0 )
:name "pid5"
  :pre (and( <= 4.5 m_0)( <= m_0 9.0))
  (let ([ki 0.69006])
    (let ([kp 9.4514])
      (let ([kd 2.8454])
        (let ([i_0 0.0])
          (let ([c 5.0])
            (let ([dt 0.2])
              (let ([invdt 5.0])
                (let ([eold_0 0.0])
                  (let ([e_1 ( - c m_0)])
                    (let ([p_1 ( * kp e_1)])
                      (let ([i_1 ( + i_0 ( * ( * ki dt) e_1))])
                        (let ([d_1 ( * ( * kd invdt) ( - e_1 eold_0))])
                          (let ([r_1 ( + ( + p_1 i_1) d_1)])
                            (let ([m_1 ( + m_0 ( * 0.01 r_1))])
                              (let ([eold_1 e_1])
                                (let ([e_2 ( - c m_1)])
                                  (let ([p_2 ( * kp e_2)])
                                    (let ([i_2 ( + i_1 ( * ( * ki dt) e_2))])
                                      (let ([d_2 ( * ( * kd invdt) ( - e_2 eold_1))])
                                        (let ([r_2 ( + ( + p_2 i_2) d_2)])
                                          (let ([m_2 ( + m_1 ( * 0.01 r_2))])
                                            (let ([eold_2 e_2])
                                              (let ([e_3 ( - c m_2)])
                                                (let ([p_3 ( * kp e_3)])
                                                  (let ([i_3 ( + i_2 ( * ( * ki dt) e_3))])
                                                    (let ([d_3 ( * ( * kd invdt) ( - e_3 eold_2))])
                                                      (let ([r_3 ( + ( + p_3 i_3) d_3)])
                                                        (let ([m_3 ( + m_2 ( * 0.01 r_3))])
                                                          (let ([eold_3 e_3])
                                                            (let ([e_4 ( - c m_3)])
                                                              (let ([p_4 ( * kp e_4)])
                                                                (let ([i_4 ( + i_3 ( * ( * ki dt) e_4))])
                                                                  (let ([d_4 ( * ( * kd invdt) ( - e_4 eold_3))])
                                                                    (let ([r_4 ( + ( + p_4 i_4) d_4)])
                                                                      (let ([m_4 ( + m_3 ( * 0.01 r_4))])
                                                                        (let ([eold_4 e_4])
                                                                          (let ([e_5 ( - c m_4)])
                                                                            (let ([p_5 ( * kp e_5)])
                                                                              (let ([i_5 ( + i_4 ( * ( * ki dt) e_5))])
                                                                                (let ([d_5 ( * ( * kd invdt) ( - e_5 eold_4))])
                                                                                  (let ([r_5 ( + ( + p_5 i_5) d_5)])
                                                                                    ( + m_4 ( * 0.01 r_5)))))))))))))))))))))))))))))))))))))))))))
)

(FPCore ( y )
:name "leadLag1"
  :pre (and( <= 2.1 y)( <= y 17.9))
  (let ([xc0 0.0])
    (let ([xc1 0.0])
        (let ([Ac00 0.499])
          (let ([Ac01 -0.05])
            (let ([Ac10 0.01])
              (let ([Ac11 1.0])
                (let ([Bc0 1.0])
                  (let ([Bc1 0.0])
                    (let ([Cc0 564.48])
                      (let ([Cc1 0.0])
                        (let ([Dc -1280.0])
                          (let ([xc0_1 ( + ( + ( * Ac00 xc0) ( * Ac01 xc1)) ( * Bc0 y))])
                            (let ([xc1_1 ( + ( + ( * Ac10 xc0_1) ( * Ac11 xc1)) ( * Bc1 y))])
                              ( + ( + ( * Cc0 xc0_1) ( * Cc1 xc1_1)) ( * Dc y))))))))))))))))
)

(FPCore ( y )
:name "leadLag3"
  :pre (and( <= 2.1 y)( <= y 17.9))
  (let ([xc0 0.0])
    (let ([xc1 0.0])
        (let ([Ac00 0.499])
          (let ([Ac01 -0.05])
            (let ([Ac10 0.01])
              (let ([Ac11 1.0])
                (let ([Bc0 1.0])
                  (let ([Bc1 0.0])
                    (let ([Cc0 564.48])
                      (let ([Cc1 0.0])
                        (let ([Dc -1280.0])
                          (let ([xc0_1 ( + ( + ( * Ac00 xc0) ( * Ac01 xc1)) ( * Bc0 y))])
                            (let ([xc1_1 ( + ( + ( * Ac10 xc0_1) ( * Ac11 xc1)) ( * Bc1 y))])
                              (let ([xc0_2 ( + ( + ( * Ac00 xc0_1) ( * Ac01 xc1_1)) ( * Bc0 y))])
                                (let ([xc1_2 ( + ( + ( * Ac10 xc0_2) ( * Ac11 xc1_1)) ( * Bc1 y))])
                                  (let ([xc0_3 ( + ( + ( * Ac00 xc0_2) ( * Ac01 xc1_2)) ( * Bc0 y))])
                                    (let ([xc1_3 ( + ( + ( * Ac10 xc0_3) ( * Ac11 xc1_2)) ( * Bc1 y))])
                                      ( + ( + ( * Cc0 xc0_3) ( * Cc1 xc1_3)) ( * Dc y))))))))))))))))))))
)

(FPCore ( y )
:name "leadLag5"
  :pre (and( <= 2.1 y)( <= y 17.9))
  (let ([xc0 0.0])
    (let ([xc1 0.0])
        (let ([Ac00 0.499])
          (let ([Ac01 -0.05])
            (let ([Ac10 0.01])
              (let ([Ac11 1.0])
                (let ([Bc0 1.0])
                  (let ([Bc1 0.0])
                    (let ([Cc0 564.48])
                      (let ([Cc1 0.0])
                        (let ([Dc -1280.0])
                          (let ([xc0_1 ( + ( + ( * Ac00 xc0) ( * Ac01 xc1)) ( * Bc0 y))])
                            (let ([xc1_1 ( + ( + ( * Ac10 xc0_1) ( * Ac11 xc1)) ( * Bc1 y))])
                              (let ([xc0_2 ( + ( + ( * Ac00 xc0_1) ( * Ac01 xc1_1)) ( * Bc0 y))])
                                (let ([xc1_2 ( + ( + ( * Ac10 xc0_2) ( * Ac11 xc1_1)) ( * Bc1 y))])
                                  (let ([xc0_3 ( + ( + ( * Ac00 xc0_2) ( * Ac01 xc1_2)) ( * Bc0 y))])
                                    (let ([xc1_3 ( + ( + ( * Ac10 xc0_3) ( * Ac11 xc1_2)) ( * Bc1 y))])
                                      (let ([xc0_4 ( + ( + ( * Ac00 xc0_3) ( * Ac01 xc1_3)) ( * Bc0 y))])
                                        (let ([xc1_4 ( + ( + ( * Ac10 xc0_4) ( * Ac11 xc1_3)) ( * Bc1 y))])
                                          (let ([xc0_5 ( + ( + ( * Ac00 xc0_3) ( * Ac01 xc1_3)) ( * Bc0 y))])
                                            (let ([xc1_5 ( + ( + ( * Ac10 xc0_4) ( * Ac11 xc1_3)) ( * Bc1 y))])
                                              ( + ( + ( * Cc0 xc0_4) ( * Cc1 xc1_4)) ( * Dc y))))))))))))))))))))))))
)

(FPCore ( u )
:name "trapezoid1"
  :pre (and( <= 1.11 u)( <= u 2.22))
  (let ([a 0.25])
    (let ([b 5000.0])
      (let ([n 25.0])
        (let ([r_0 0.0])
          (let ([xa_0 0.25])
            (let ([h ( / ( - b a) n)])
              (let ([xb_1 ( + xa_0 h)])
                (let ([gxa_1 ( / u ( - ( + ( - ( * ( * ( * 0.7 xa_0) xa_0) xa_0) ( * ( * 0.6 xa_0) xa_0)) ( * 0.9 xa_0)) 0.2))])
                  (let ([gxb_1 ( / u ( - ( + ( - ( * ( * ( * 0.7 xb_1) xb_1) xb_1) ( * ( * 0.6 xb_1) xb_1)) ( * 0.9 xb_1)) 0.2))])
                    ( + r_0 ( * ( * ( + gxb_1 gxa_1) 0.5) h)))))))))))
)

(FPCore ( u )
:name "trapezoid3"
  :pre (and( <= 1.11 u)( <= u 2.22))
  (let ([a 0.25])
    (let ([b 5000.0])
      (let ([n 25.0])
        (let ([r_0 0.0])
          (let ([xa_0 0.25])
            (let ([h ( / ( - b a) n)])
              (let ([xb_1 ( + xa_0 h)])
                (let ([gxa_1 ( / u ( - ( + ( - ( * ( * ( * 0.7 xa_0) xa_0) xa_0) ( * ( * 0.6 xa_0) xa_0)) ( * 0.9 xa_0)) 0.2))])
                  (let ([gxb_1 ( / u ( - ( + ( - ( * ( * ( * 0.7 xb_1) xb_1) xb_1) ( * ( * 0.6 xb_1) xb_1)) ( * 0.9 xb_1)) 0.2))])
                    (let ([r_1 ( + r_0 ( * ( * ( + gxb_1 gxa_1) 0.5) h))])
                      (let ([xa_1 ( + xa_0 h)])
                        (let ([xb_2 ( + xa_1 h)])
                          (let ([gxa_2 ( / u ( - ( + ( - ( * ( * ( * 0.7 xa_1) xa_1) xa_1) ( * ( * 0.6 xa_1) xa_1)) ( * 0.9 xa_1)) 0.2))])
                            (let ([gxb_2 ( / u ( - ( + ( - ( * ( * ( * 0.7 xb_2) xb_2) xb_2) ( * ( * 0.6 xb_2) xb_2)) ( * 0.9 xb_2)) 0.2))])
                              (let ([r_2 ( + r_1 ( * ( * ( + gxb_2 gxa_2) 0.5) h))])
                                (let ([xa_2 ( + xa_1 h)])
                                  (let ([xb_3 ( + xa_2 h)])
                                    (let ([gxa_3 ( / u ( - ( + ( - ( * ( * ( * 0.7 xa_2) xa_2) xa_2) ( * ( * 0.6 xa_2) xa_2)) ( * 0.9 xa_2)) 0.2))])
                                      (let ([gxb_3 ( / u ( - ( + ( - ( * ( * ( * 0.7 xb_3) xb_3) xb_3) ( * ( * 0.6 xb_3) xb_3)) ( * 0.9 xb_3)) 0.2))])
                                        ( + r_2 ( * ( * ( + gxb_3 gxa_3) 0.5) h)))))))))))))))))))))
)

(FPCore ( u )
:name "trapezoid5"
  :pre (and( <= 1.11 u)( <= u 2.22))
  (let ([a 0.25])
    (let ([b 5000.0])
      (let ([n 25.0])
        (let ([r_0 0.0])
          (let ([xa_0 0.25])
            (let ([h ( / ( - b a) n)])
              (let ([xb_1 ( + xa_0 h)])
                (let ([gxa_1 ( / u ( - ( + ( - ( * ( * ( * 0.7 xa_0) xa_0) xa_0) ( * ( * 0.6 xa_0) xa_0)) ( * 0.9 xa_0)) 0.2))])
                  (let ([gxb_1 ( / u ( - ( + ( - ( * ( * ( * 0.7 xb_1) xb_1) xb_1) ( * ( * 0.6 xb_1) xb_1)) ( * 0.9 xb_1)) 0.2))])
                    (let ([r_1 ( + r_0 ( * ( * ( + gxb_1 gxa_1) 0.5) h))])
                      (let ([xa_1 ( + xa_0 h)])
                        (let ([xb_2 ( + xa_1 h)])
                          (let ([gxa_2 ( / u ( - ( + ( - ( * ( * ( * 0.7 xa_1) xa_1) xa_1) ( * ( * 0.6 xa_1) xa_1)) ( * 0.9 xa_1)) 0.2))])
                            (let ([gxb_2 ( / u ( - ( + ( - ( * ( * ( * 0.7 xb_2) xb_2) xb_2) ( * ( * 0.6 xb_2) xb_2)) ( * 0.9 xb_2)) 0.2))])
                              (let ([r_2 ( + r_1 ( * ( * ( + gxb_2 gxa_2) 0.5) h))])
                                (let ([xa_2 ( + xa_1 h)])
                                  (let ([xb_3 ( + xa_2 h)])
                                    (let ([gxa_3 ( / u ( - ( + ( - ( * ( * ( * 0.7 xa_2) xa_2) xa_2) ( * ( * 0.6 xa_2) xa_2)) ( * 0.9 xa_2)) 0.2))])
                                      (let ([gxb_3 ( / u ( - ( + ( - ( * ( * ( * 0.7 xb_3) xb_3) xb_3) ( * ( * 0.6 xb_3) xb_3)) ( * 0.9 xb_3)) 0.2))])
                                        (let ([r_3 ( + r_2 ( * ( * ( + gxb_3 gxa_3) 0.5) h))])
                                          (let ([xa_3 ( + xa_2 h)])
                                            (let ([xb_4 ( + xa_3 h)])
                                              (let ([gxa_4 ( / u ( - ( + ( - ( * ( * ( * 0.7 xa_3) xa_3) xa_3) ( * ( * 0.6 xa_3) xa_3)) ( * 0.9 xa_3)) 0.2))])
                                                (let ([gxb_4 ( / u ( - ( + ( - ( * ( * ( * 0.7 xb_4) xb_4) xb_4) ( * ( * 0.6 xb_4) xb_4)) ( * 0.9 xb_4)) 0.2))])
                                                  (let ([r_4 ( + r_3 ( * ( * ( + gxb_4 gxa_4) 0.5) h))])
                                                    (let ([xa_4 ( + xa_3 h)])
                                                      (let ([xb_5 ( + xa_4 h)])
                                                        (let ([gxa_5 ( / u ( - ( + ( - ( * ( * ( * 0.7 xa_4) xa_4) xa_4) ( * ( * 0.6 xa_4) xa_4)) ( * 0.9 xa_4)) 0.2))])
                                                          (let ([gxb_5 ( / u ( - ( + ( - ( * ( * ( * 0.7 xb_5) xb_5) xb_5) ( * ( * 0.6 xb_5) xb_5)) ( * 0.9 xb_5)) 0.2))])
                                                            ( + r_4 ( * ( * ( + gxb_5 gxa_5) 0.5) h)))))))))))))))))))))))))))))))
)
