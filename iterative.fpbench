;; -*- mode: scheme -*-

(lambda ([c 12.34] [sr* 0.0785398163397] [sl* 0.0525398163397] [theta* -0.985] [inv_l 0.1])
  :name "Odometry"
  :status bug
  :description "Compute the position of a robot from the speed of the wheels."
  :inputs "Speed `sl`, `sr` of the left and right wheel, in rad/s"
  :pre (and (< 0.05 sl) (< sl (* 2 PI)) (< 0.05 sr) (< sr (* 2 PI)))
  :cite (damouche-martel-chapoutot-fmics15)
  (while (< t 1000)
    ;; XXX: Inlining changes the behavior around function calls; cause unknown.
    ([t 0 (+ t 1)]
     [j 0 (if (>= j 50) 0.0 (+ j 1))]
     [sr sr* (if (>= j 50) sl sr)]
     [sl sl* (if (>= j 50) sr sl)]
     [theta theta* (+ theta (* (- (* c sr) (* c sl)) inv_l))]
     ;; XXX: Changed the inline sin/cos routine to an accurate routine
     [x 0 (+ x (* (* (+ (* c sl) (* c sr)) 0.5)
                  (cos (+ theta (* (* (- (* c sr) (* c sl)) inv_l) 0.5)))))]
     [y 0 (+ y (* (* (+ (* c sl) (* c sr)) 0.5)
                  (sin (+ theta (* (* (- (* c sr) (* c sl)) inv_l) 0.5)))))])
    ;; XXX: The original code produces x and y separately
    (+ x y)))

(lambda ((c 0.0) (dt 0.2) (kd 2.8454) (ki 0.69006) (kp 9.4514))
  :name "PID"
  :status good
  :description "Keep a measure at its setpoint using a PID controller."
  :inputs "Measure `m`; gains `kp`, `ki`, `kd`; setpoint `c`"
  :pre (and (and (< -10.0 m) (< m 10.0)) (and (< -10.0 c) (< c 10.0)))
  :cite (damouche-martel-chapoutot-nsv14)
  (while (< t 100.0)
    ([t 0.0 (+ t dt)]
     [i 0.0 (+ i (* (* ki dt) (- c m)))]
     (m -5.0
        (+ m (* 0.01 (+ (+ (* kp (- c m)) (+ i (* (* ki dt) (- c m))))
                        (* (* kd (/ 1 dt)) (- (- c m) eold))))))
     [eold 0.0 (- c m)])
    m))

(lambda ([eps 0.05] [y_n* 10.1] [c 100.1] [k 1.2] [h 0.1])
  :name "Runge-Kutta 4"
  :status unknown
  :description "Solve the differential equation `y' = (c - y)^2"
  :inputs "Step size `h`; initial condition `y_n*`; paramter `c`"
  :pre (and (< 0 y_n*) (< y_n* 100) (< 0.1 h) (< h 10e-6) (< 50 c) (< c 200))
  :cite (damouch-martel-chapoutot-fmics15)
  (while (> e eps)
    ([t 0.0 (+ t 0.1)]
     [i 0.0 (+ i 1.0)]
     [y_n y_n* (+ y_n (* (* (/ 1 6) h)
                         (+ (+ (+ (* (* k (- c y_n)) (- c y_n))
                                  (* 2.0 (* (* k (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))
                                            (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))))
                               (* 2.0 (* (* k (- c (+ y_n (* 0.5 h (* (* k (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))
                                                                      (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))))))
                                         (- c (+ y_n (* 0.5 h (* (* k (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n)))))) (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))))))))
                            (* (* k (- c (+ y_n (* h (* (* k (- c (+ y_n (* 0.5 h (* (* k (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))
                                                                                     (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))))))
                                                        (- c (+ y_n (* 0.5 h (* (* k (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))
                                                                                (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))))))))))
                               (- c (+ y_n (* h (* (* k (- c (+ y_n (* 0.5 h (* (* k (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))
                                                                                (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))))))
                                                   (- c (+ y_n (* 0.5 h (* (* k (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n))))))
                                                                           (- c (+ y_n (* 0.5 h (* (* k (- c y_n)) (- c y_n)))))))))))))))))]
     [e 1.0 (- e eps)])
    y_n))

(lambda ((yd 5.0) (Dc -1280.0) (Cc1 0.0) (Cc0 564.48) (Bc1 0.0) (Bc0 1.0)
         (Ac11 1.0) (Ac10 0.01) (Ac01 -0.05) (Ac00 0.499) (y 2.5) (eps 0.01))
  :name "Lead-lag System"
  :status unknown
  :description "Move a mass from an initial position to a desired position."
  :inputs "Initial position `y`; desired position `yd`"
  :pre (and (< 0 yd) (< yd 50) (< 0 y) (< y 50))
  :cite (feron-ieee10)
  (while (> e eps)
    ([xc0 0.0 (+ (* Ac00 xc0) (+ (* Ac01 xc1) (* Bc0 (if (< 1.0 (if (< (- y yd) -1.0) -1.0 (- y yd))) 1.0 (if (< (- y yd) -1.0) -1.0 (- y yd))))))]
     [xc1 0.0 (+ (* Ac10 (+ (* Ac00 xc0) (+ (* Ac01 xc1) (* Bc0 (if (< 1.0 (if (< (- y yd) -1.0) -1.0 (- y yd))) 1.0 (if (< (- y yd) -1.0) -1.0 (- y yd))))))) (+ (* Ac11 xc1) (* Bc1 (if (< 1.0 (if (< (- y yd) -1.0) -1.0 (- y yd))) 1.0 (if (< (- y yd) -1.0) -1.0 (- y yd))))))]
     [i 0.0 (+ i 1.0)])
    (+ xc0 xc1)))

(lambda ((tetaf 0.0) (vrf 0.0) (rf 6400000.0) (teta0 0.0) (vr0 0.0) (dt 0.1)
         (A 140.0) (Mf 150000.0) (Mt 5.9736e+24) (G 6.67428e-11) (R 6400000.0))
  :name "Rocket Trajectory"
  :status unknown
  :description "Compute the trajectory of a rocket around the earth."
  :inputs "Mass `Mf`; acceleration `A`"
  :cite (damouche-martel-chapoutot-cf15)
  (while (< i 2000000.0)
   ([i 1.0 (+ i 1.0)]
    [u1_im1 (+ (* 400.0 10000.0) 6400000.0) (+ (* u2_im1 dt) u1_im1)]
    [u2_im1 0.0 (+ (* (* G (/ Mt (sqr u1_im1))) dt) (* u1_im1 u4_im1 u4_im1 dt))]
    [u3_im1 0.0 (+ (* ur_im1 dt) u3_im1)]
    [u4_im1 (/ (sqrt (/ (* 6.67428e-11 5.9736e+24) (+ (* 400.0 10000.0) 6400000.0)))
               (+ (* 400.0 10000.0) 6400000.0))
            (+ (* (* -2.0 (* u2_im1 (/ u4_im u1_im1))) dt) u4_im1)]
    [w1_im1 6400000.0 (+ (* w2_im1 dt) w1_im1)]
    [w2_im1 0.0 (+ (+ (+ (* (* G (/ Mt (sqr w1_im1))) dt) (* w1_im1 w4_im1 w4_im1 dt))
                      (if (> mf_im1 0.0) (* (/ (* A w2_im1) (- Mf (* A t_im1))) dt) 0.0)) w2_im1)]
    [w3_im1 0.0 (+ (* w4_im1 dt) w3_im1)]
    [w4_im1 (* 1.1 (/ (sqrt (/ (* 6.67428e-11 5.9736e+24) 6400000.0)) (+ (* 400.0 10000.0) 6400000.0)))
            (+ (* (* -2.0 (* w2_im1 (/ w4_im1 w1_im1))) dt) (+ (if (> mf_im1 0.0) (* A (* (/ w4_im1 (- Mf (* A t_im1))) dt)) 0.0) w4_im1))]
    [t_im1 0.0 (+ t_im1 dt)]
    [mf_im1 150000.0 (- mf_im1 (* A t_im1))])
   (+ x y)))

(lambda ((b4 (/ 1.0 5.0)) (b3 0.25) (b2 (/ 1.0 3.0)) (b1 0.5) (a44 0.601) (a33 0.6006) (a22 0.62) (a11 0.61) (eps 1e-17))
  :name "Jacobi's Method"
  :status unknown
  :description "Solve a linear system `Ax = b`."
  :inputs "Array entries `aij`; vector entries `bi`"
  :cite (kendall-1989)
  (while (> e eps)
    ([i 0.0 (+ i 1.0)]
     [x1 0.0 (+ (- (- (/ b1 a11) (* (/ 0.1 a11) x2)) (* (/ 0.2 a11) x3))
                (* (/ 0.3 a11) x4))]
     [x2 0.0 (- (+ (- (/ b2 a22) (* (/ 0.3 a22) x1)) (* (/ 0.1 a22) x3))
                (* (/ 0.2 a22) x4))]
     [x3 0.0 (- (+ (- (/ b3 a33) (* (/ 0.2 a33) x1)) (* (/ 0.3 a33) x2))
                (* (/ 0.1 a33) x4))])
    (+ (+ (+ x1 x2) x3) x4)))

(lambda ((x0 0.0) (eps 0.005))
  :name "Newton-Raphson's Method"
  :status unknown
  :description "Find the zeros of a function `f = (x - 2)**5`."
  :inputs "Initial guess `x0`"
  :pre (and (< 0 x0) (< x0 3))
  :cite (kendall-1989)
  (while (and (> e eps) (< i 100000))
    ([x 0.0 (- x
               (/ (- (+ (- (+ (- (* (* (* (* x x) x) x) x) (* (* (* (* 10.0 x) x) x) x)) (* 40.0 x x x)) (* (* 80.0 x) x)) (* 80.0 x)) 32.0)
                  (+ (- (+ (- (* (* (* (* 5.0 x) x) x) x) (* (* (* 40.0 x) x) x)) (* 120.0 x x)) (* 160.0 x)) 80.0)))]
    [i 0.0 (+ i 1.0)])
   (+ (+ (+ i x) x_n) e)))

;; Eigenvalue Computation

(lambda ((eps 5e-06) (Q23 0.0) (Q21 0.0) (Q13 0.0) (Q12 0.0))
  :name "Iterative Gram-Schmidt Method"
  :status unknown
  :description "Orthogonalize a set of non-zero vectors in a Euclidian or Hermitian space."
  :inputs "Vectors `Qij`"
  :pre (and (< 1.0 Q11) (< Q11 (/ 1 7)) (< 1 Q22) (< Q22 (/ 1 25)))
  :cite (abdelmalek-bit71 golub-loan-1996 hernandez-roman-tomas-vidal-tr07)
  (while (> e eps)
   ([qj1 (/ 1.0 2592.0)
         (- qj1 (+ (+ (* Q11 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3)))
                      (* Q12 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3))))
                   (* Q13 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))))]
    [qj2 (/ 1.0 2601.0)
         (- qj2 (+ (+ (* Q21 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3)))
                      (* Q22 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3))))
                   (* Q23 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))))]
    [qj3 (/ 1.0 2583.0)
         (- qj3 (+ (+ (* Q31 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3)))
                      (* Q32 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3))))
                   (* Q33 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))))]
    [r1 0.0 (+ r1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3)))]
    [r2 0.0 (+ r2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))]
    [r3 0.0 (+ r3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))]
    [i 1.0 (+ i 1.0)])
   (+ (+ (+ (+ i qj1) qj2) qj3) e)))
