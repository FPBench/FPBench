;; -*- mode: scheme -*-

(function ()
 :name "Odometry"
 :description "Compute the position of a robot from the speed of the wheels."
 :inputs "Speed `sl`, `sr` of the left and right wheel, in rad/s"
 :type float
 :pre (and (< 0.05 sl (* 2 PI)) (< 0.05 sr (* 2 PI)))
 :cite (damouche-martel-chapoutot-fmics15)
 [= cosi 0.0]
 [= sini 0.0]
 [= arg 0.0]
 [= delta_d 0.0]
 [= delta_dl 0.0]
 [= delta_dr 0.0]
 [= delta_theta 0.0]
 [= sr 0.0785398163397]
 [= sl 0.0525398163397]
 [= theta -0.985]
 [= t 0]
 [= x 0.0]
 [= y 0.0]
 [= inv_l 0.1]
 [= c 12.34]
 [= j 0]
 (while (< t 1000)
   [= delta_dl (* c sl)]
   [= delta_dr (* c sr)]
   [= delta_d (* (+ delta_dl delta_dr) 0.5)]
   [= delta_theta (* (- delta_dr delta_dl) inv_l)]
   [= arg (+ theta (* delta_theta 0.5))]
   [= cosi (cos arg)]
   [= x (+ x (* delta_d cosi))]
   [= sini (sin arg)]
   [= y (+ y (* delta_d sini))]
   [= theta (+ theta delta_theta)]
   [= t (+ t 1)]
   (if
    [(== j 50)
     [= j 0]
     [= tmp sl]
     [= sl sr]
     [= sr tmp]]
    [else
     [= j (+ j 1)]]))
 (output x y))

(function ([m -5.0] [kp 9.4514] [ki 0.69006] [kd 2.8454])
  :name "PID"
  :description "Keep a measure at its setpoint using a PID controller."
  :inputs "Measure `m`; gains `kp`, `ki`, `kd`; setpoint `c`"
  :type double
  :pre (and (< -10.0 m 10.0) (< -10.0 c 10.0))
  :cite (damouche-martel-chapoutot-nsv14)
 [= t 0.0]
 [= dt 0.2]
 [= invdt (/ 1 dt)]
 [= c 0.0]
 [= eold 0.0]
 [= i 0.0]
 (while (< t 100.0)
   [= e (- c m)]
   [= p (* kp e)]
   [= i (+ i (* ki dt e))]
   [= d (* kd invdt (- e eold))]
   [= r (+ p i d)]
   [= m (+ m (* 0.01 r))]
   [= eold e]
   [= t (+ t dt)])
 (output m))

(function ([h 0.1] [y_n* 10.1] [c 100.1])
 :name "Runge-Kutta 4"
 :description "Solve the differential equation `y' = (c - y)^2"
 :inputs "Step size `h`; initial condition `y_n*`; paramter `c`"
 :type float
 :pre (and (< 0 y_n 100) (< 10e-6 h 0.1) (< 50 c 200))
 :cite (damouch-martel-chapoutot-fmics15)
 [= sixieme (/ 1 6)]
 [= e 1.0]
 [= eps 0.005]
 [= t 0.0]
 [= k 1.2]
 [= i 0.0]
 [= y_n y_n*]
 (while (> e eps)
   [= k1 (* k (- c y_n) (- c y_n))]
   [= k2 (* k (- c (+ y_n (* 0.5 h k1))) (- c (+ y_n (* 0.5 h k1))))]
   [= k3 (* k (- c (+ y_n (* 0.5 h k2))) (- c (+ y_n (* 0.5 h k2))))]
   [= k4 (* k (- c (+ y_n (* h k3))) (- c (+ y_n (* h k3))))]
   [= y_n1 (+ y_n (* sixieme h (+ k1 (* 2.0 k2) (* 2.0 k3) k4)))]
   [= t (+ t 0.1)]
   [= i (+ i 1.0)]
   [= y_n y_n1]
   [= e (- e eps)])
 [= e (abs e)]
 (output i e))

(function ([y 2.5] [yd 5.0])
 :name "Lead-lag System"
 :description "Move a mass from an initial position to a desired position."
 :inputs "Initial position `y`; desired position `yd`"
 :type float
 :pre (and (< 0 yd 50) (< 0 y 50))
 :cite (feron-ieee10)
 [= i 0.0]
 [= eps 0.01]
 [= e 1.0]
 [= xc0 0.0]
 [= xc1 0.0]
 [= Ac00 0.4990]
 [= Ac01 -0.0500]
 [= Ac10 0.0100]
 [= Ac11 1.0000]
 [= Bc0 1.0]
 [= Bc1 0.0]
 [= Cc0 564.48]
 [= Cc1 0.0]
 [= Dc -1280.0]
 (while (> e eps)
   [= yc (- y yd)]
   [= yc (if (< yc -1.0) -1.0 yc)]
   [= yc (if (< 1.0 yc) 1.0 yc)]
   [= u (+ (* Cc0 xc0) (+ (* Cc1 xc1) (* Dc yc)))]
   [= xc0 (+ (* Ac00 xc0) (+ (* Ac01 xc1) (* Bc0 yc)))]
   [= xc1 (+ (* Ac10 xc0) (+ (* Ac11 xc1) (* Bc1 yc)))]
   [= i (+ i 1.0)]
   [= e (abs (- yc xc1))])
 (output xc1))

(function ([Mf 150000.0] [A 140.0])
 :name "Rocket Trajectory"
 :description "Compute the trajectory of a rocket around the earth."
 :inputs "Mass `Mf`; acceleration `A`"
 :type float
 :cite (damouche-martel-chapoutot-cf15)
 [= R 6400.0e3]
 [= G 6.67428e-11]
 [= Mt 5.9736e24]
 [= dt 0.1]
 [= T (* 24.0 3600.0)]
 [= nombrepas (/ T dt)]
 [= r0 (+ (* 400.0 10e3) R)]
 [= vr0 0.0]
 [= teta0 0.0]
 [= viss (sqrt (/ (* G Mt) r0))]
 [= vteta0 (/ viss r0)]
 [= rf R]
 [= vrf 0.0]
 [= tetaf 0.0]
 [= vl (sqrt (/ (* G Mt) R))]
 [= vlrad (/ vl r0)]
 [= vtetaf (* 1.1 vlrad)]
 [= u1_im1 r0]
 [= u2_im1 vr0]
 [= u3_im1 teta0]
 [= u4_im1 vteta0]
 [= w1_im1 rf]
 [= w2_im1 vrf]
 [= w3_im1 tetaf]
 [= w4_im1 vtetaf]
 [= i 1.0]
 [= mf_im1 Mf]
 [= t_im1 0.0]
 (while (< i 2000000.0)
   [= t_i (+ t_im1 dt)]
   [= mf_i (- mf_im1 (* A t_im1))]
   [= u1_i (+ (* u2_im1 dt) u1_im1)]
   [= u3_i (+ (* u4_im1 dt) u3_im1)]
   [= w1_i (+ (* w2_im1 dt) w1_im1)]
   [= w3_i (+ (* w4_im1 dt) w3_im1)]
   [= u2_i (+ (* (- G) (/ Mt (sqr u1_im1)) dt) (* u1_im1 u4_im1 u4_im1 dt))]
   [= u4_i (+ (+ (* -2.0 (* u2_im1 (/ u4_im1 u1_im1)) dt) u4_im1))]
   [= w2_i (+ (* (- G) (/ Mt (sqr w1_im1)) dt) (* w1_im1 w4_im1 w4_im1 dt)
              (if (> mf_im1 0.0) (* (/ (* A w2_im1) (- Mf (* A t_im1))) dt) 0.0)
              w2_im1)]
   [= w4_i (+ (* -2.0 (* w2_im1 (/ w4_im1 w1_im1)) dt)
              (+ (if (> mf_im1 0.0) (* A (* (/ w4_im1 (- Mf (* A t_im1))) dt)) 0.0)
                 w4_im1))]
   [= c (cos u3_i)]
   [= s (sin u3_i)]
   [= x (* u1_i c)]
   [= y (* u1_i s)]
   [= i (+ i 1.0)]
   [= u1_im1 u1_i]
   [= u2_im1 u2_i]
   [= u3_im1 u3_i]
   [= u4_im1 u4_i]
   [= w1_im1 w1_i]
   [= w2_im1 w2_i]
   [= w3_im1 w3_i]
   [= w4_im1 w4_i]
   [= t_im1 t_i]
   [= mf_im1 mf_i])
 (output x y))

(function ([a11 0.61] [a22 0.62] [a33 0.6006] [a44 0.601] [b1 0.5] [b2 (/ 1.0 3.0)] [b3 0.25] [b4 (/ 1.0 5.0)])
 :name "Jacobi's Method"
 :description "Solve a linear system `Ax = b`."
 :inputs "Array entries `aij`; vector entries `bi`"
 :type float
 :cite (atkinson-1989)
 [= i 0.0]
 [= eps 0.00000000000000001]
 [= x1 0.0]
 [= x_n1 0.0]
 [= x2 0.0]
 [= x_n2 0.0]
 [= x3 0.0]
 [= x_n3 0.0]
 [= x4 0.0]
 [= x_n4 0.0]
 [= e 1.0]
 (while (> e eps)
   [= x_n1 (+ (- (- (/ b1 a11) (* (/ 0.1 a11) x2)) (* (/ 0.2 a11) x3)) (* (/ 0.3 a11) x4))]
   [= x_n2 (- (+ (- (/ b2 a22) (* (/ 0.3 a22) x1)) (* (/ 0.1 a22) x3)) (* (/ 0.2 a22) x4))]
   [= x_n3 (- (+ (- (/ b3 a33) (* (/ 0.2 a33) x1)) (* (/ 0.3 a33) x2)) (* (/ 0.1 a33) x4))]
   [= x_n4 (- (- (+ (/ b4 a44) (* (/ 0.1 a44) x1)) (* (/ 0.2 a44) x2)) (* (/ 0.3 a44) x3))]
   [= i (+ i 1.0)]
   [= e (- x_n4 x4)]
   [= e (abs e)]
   [= x1 x_n1]
   [= x2 x_n2]
   [= x3 x_n3]
   [= x4 x_n4])
 (output i x_n2 x2 e))

(function ([x0 0.0])
 :name "Newton-Raphson's Method"
 :description "Find the zeros of a function `f = (x - 2)**5`."
 :inputs "Initial guess `x0`"
 :type float
 :pre (< 0 x0 3)
 :cite (atkinson-1989)
 [= eps 0.0005]
 [= i 0.0]
 [= e 1.0]
 [= x 0.0]
 (while (and (> e eps) (< i 100000))
   [= f (- (+ (- (+ (- (* x x x x x) (* 10.0 x x x x)) (* 40.0 x x x))
                 (* 80.0 x x)) (* 80.0 x)) 32.0)]
   [= ff (+ (- (+ (- (* 5.0 x x x x) (* 40.0 x x x)) (* 120.0 x x)) (* 160.0 x)) 80.0)]
   [= x_n (- x (/ f ff))]
   [= e (abs (- x x_n))]
   [= x x_n]
   [= i (+ i 1.0)])
 (output i x x_n e))

(function ([a11 150.0] [a12  0.01] [a13  0.01] [a14  0.01]
           [a21  0.01] [a22 150.0] [a23  0.01] [a24  0.01]
           [a31  0.01] [a32  0.01] [a33 150.0] [a34  0.01]
           [a41  0.01] [a42  0.01] [a43  0.01] [a44 150.0]
           [v1 0.0] [v2 0.0] [v3 0.0] [v4 1.0])
 :name "Eigenvalue Computation"
 :description "Compute the largest eigenvalue of a matrix and return its vector."
 :inputs "Matrix `aij`; initial guess `vi` with one nonzero element"
 :pre (< 150 d 200)
 :type float
 :cite (golub-vanloan-1996)
 [= i 0.0]
 [= eps 0.0005]
 [= e 1.0]
 [= i 0.0]
 (while (> e eps)
   [= vx (+ (* a11 v1) (* a12 v2) (* a13 v3) (* a14 v4))]
   [= vy (+ (* a21 v1) (* a22 v2) (* a23 v3) (* a24 v4))]
   [= vz (+ (* a31 v1) (* a32 v2) (* a33 v3) (* a34 v4))]
   [= vw (+ (* a41 v1) (* a42 v2) (* a43 v3) (* a44 v4))]
   [= i (+ i 1.0)]
   [= v1 (/ vx vw)]
   [= v2 (/ vy vw)]
   [= v3 (/ vz vw)]
   [= v4 1.0]
   [= e (abs (- 1.0 v1))])
 (output i v1 vz e))

(function ([Q11 (/ 1 63)] [Q12 0] [Q13 0]
           [Q21 0] [Q22 (/ 1 225)] [Q23 0]
           [Q31 (/ 1 2592)] [Q32 (/ 1 2601)] [Q33 (/ 1 2583)])
 :name "Iterative Gram-Schmidt Method"
 :description "Orthogonalize a set of non-zero vectors in a Euclidian or Hermitian space."
 :inputs "Vectors `Qij`"
 :pre (and (< 1.0 Q11 (/ 1 7)) (< 1 Q22 (/ 1 25)))
 :type float
 :cite (abdelmalek-bit71 golub-vanloan-1996 hernandez-roman-tomas-vidal-tr07)
 ;; qj = xj
 [= qj1 Q31]
 [= qj2 Q32]
 [= qj3 Q33]
 ; rj = 0.0
 [= r1 0.0]
 [= r2 0.0]
 [= r3 0.0]
 [= eps .000005]
 [= e 10.0]
 [= r (+ (sqr qj1) (sqr qj2) (sqr qj3))]
 [= rold (sqrt r)]
 [= i 1.0]
 (while (> e eps)
   ;; h = Qj - 1T qj
   [= h1 (+ (* Q11 qj1) (* Q21 qj2) (* Q31 qj3))]
   [= h2 (+ (* Q12 qj1) (* Q22 qj2) (* Q32 qj3))]
   [= h3 (+ (* Q13 qj1) (* Q23 qj2) (* Q33 qj3))]
   ;; qj = qj - Qjm1 h
   [= qj1 (- qj1 (+ (* Q11 h1) (* Q12 h2) (* Q13 h3)))]
   [= qj2 (- qj2 (+ (* Q21 h1) (* Q22 h2) (* Q23 h3)))]
   [= qj3 (- qj3 (+ (* Q31 h1) (* Q32 h2) (* Q33 h3)))]
   ;; rj = rj + h
   [= r1 (+ r1 h1)]
   [= r2 (+ r2 h2)]
   [= r3 (+ r3 h3)]
   ;; rjj = ||qj||2
   [= r (+ (sqr qj1) (sqr qj2) (sqr qj3))]
   [= rjj (sqrt r)]
   [= e (abs (- 1.0 (/ rjj rold)))]
   [= i (+ i 1.0)]
   [= rold rjj])
 (output i qj1 qj2 qj3 e))
