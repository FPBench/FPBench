;; -*- mode: scheme -*-
;; Exhaustive at depth 1

(FPCore () :precision binary32 (- 1.0))

(FPCore (arg1) :precision binary32 (- arg1))

(FPCore () :precision binary32 (+ 1.0 1.0))

(FPCore (arg1) :precision binary32 (+ arg1 1.0))

(FPCore (arg1) :precision binary32 (+ 1.0 arg1))

(FPCore (arg1) :precision binary32 (+ arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (+ arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (+ arg2 arg1))

(FPCore () :precision binary32 (- 1.0 1.0))

(FPCore (arg1) :precision binary32 (- arg1 1.0))

(FPCore (arg1) :precision binary32 (- 1.0 arg1))

(FPCore (arg1) :precision binary32 (- arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (- arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (- arg2 arg1))

(FPCore () :precision binary32 (* 1.0 1.0))

(FPCore (arg1) :precision binary32 (* arg1 1.0))

(FPCore (arg1) :precision binary32 (* 1.0 arg1))

(FPCore (arg1) :precision binary32 (* arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (* arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (* arg2 arg1))

(FPCore () :precision binary32 (/ 1.0 1.0))

(FPCore (arg1) :precision binary32 (/ arg1 1.0))

(FPCore (arg1) :precision binary32 (/ 1.0 arg1))

(FPCore (arg1) :precision binary32 (/ arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (/ arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (/ arg2 arg1))

(FPCore () :precision binary32 (fabs 1.0))

(FPCore (arg1) :precision binary32 (fabs arg1))

(FPCore () :precision binary32 (fma 1.0 1.0 1.0))

(FPCore (arg1) :precision binary32 (fma arg1 1.0 1.0))

(FPCore (arg1) :precision binary32 (fma 1.0 arg1 1.0))

(FPCore (arg1) :precision binary32 (fma 1.0 1.0 arg1))

(FPCore (arg1) :precision binary32 (fma arg1 arg1 1.0))

(FPCore (arg1) :precision binary32 (fma arg1 1.0 arg1))

(FPCore (arg1) :precision binary32 (fma 1.0 arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (fma arg1 arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (fma arg2 arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (fma arg1 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (fma 1.0 arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (fma arg2 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (fma 1.0 arg2 arg1))

(FPCore (arg1) :precision binary32 (fma arg1 arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (fma arg1 arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (fma arg1 arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (fma arg2 arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (fma arg1 arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (fma arg2 arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (fma arg2 arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (fma arg1 arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (fma arg2 arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (fma arg1 arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (fma arg3 arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (fma arg2 arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (fma arg3 arg2 arg1))

(FPCore () :precision binary32 (exp 1.0))

(FPCore (arg1) :precision binary32 (exp arg1))

(FPCore () :precision binary32 (exp2 1.0))

(FPCore (arg1) :precision binary32 (exp2 arg1))

(FPCore () :precision binary32 (expm1 1.0))

(FPCore (arg1) :precision binary32 (expm1 arg1))

(FPCore () :precision binary32 (log 1.0))

(FPCore (arg1) :precision binary32 (log arg1))

(FPCore () :precision binary32 (log10 1.0))

(FPCore (arg1) :precision binary32 (log10 arg1))

(FPCore () :precision binary32 (log2 1.0))

(FPCore (arg1) :precision binary32 (log2 arg1))

(FPCore () :precision binary32 (log1p 1.0))

(FPCore (arg1) :precision binary32 (log1p arg1))

(FPCore () :precision binary32 (pow 1.0 1.0))

(FPCore (arg1) :precision binary32 (pow arg1 1.0))

(FPCore (arg1) :precision binary32 (pow 1.0 arg1))

(FPCore (arg1) :precision binary32 (pow arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (pow arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (pow arg2 arg1))

(FPCore () :precision binary32 (sqrt 1.0))

(FPCore (arg1) :precision binary32 (sqrt arg1))

(FPCore () :precision binary32 (cbrt 1.0))

(FPCore (arg1) :precision binary32 (cbrt arg1))

(FPCore () :precision binary32 (hypot 1.0 1.0))

(FPCore (arg1) :precision binary32 (hypot arg1 1.0))

(FPCore (arg1) :precision binary32 (hypot 1.0 arg1))

(FPCore (arg1) :precision binary32 (hypot arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (hypot arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (hypot arg2 arg1))

(FPCore () :precision binary32 (sin 1.0))

(FPCore (arg1) :precision binary32 (sin arg1))

(FPCore () :precision binary32 (cos 1.0))

(FPCore (arg1) :precision binary32 (cos arg1))

(FPCore () :precision binary32 (tan 1.0))

(FPCore (arg1) :precision binary32 (tan arg1))

(FPCore () :precision binary32 (asin 1.0))

(FPCore (arg1) :precision binary32 (asin arg1))

(FPCore () :precision binary32 (acos 1.0))

(FPCore (arg1) :precision binary32 (acos arg1))

(FPCore () :precision binary32 (atan 1.0))

(FPCore (arg1) :precision binary32 (atan arg1))

(FPCore () :precision binary32 (atan2 1.0 1.0))

(FPCore (arg1) :precision binary32 (atan2 arg1 1.0))

(FPCore (arg1) :precision binary32 (atan2 1.0 arg1))

(FPCore (arg1) :precision binary32 (atan2 arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (atan2 arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (atan2 arg2 arg1))

(FPCore () :precision binary32 (sinh 1.0))

(FPCore (arg1) :precision binary32 (sinh arg1))

(FPCore () :precision binary32 (cosh 1.0))

(FPCore (arg1) :precision binary32 (cosh arg1))

(FPCore () :precision binary32 (tanh 1.0))

(FPCore (arg1) :precision binary32 (tanh arg1))

(FPCore () :precision binary32 (asinh 1.0))

(FPCore (arg1) :precision binary32 (asinh arg1))

(FPCore () :precision binary32 (acosh 1.0))

(FPCore (arg1) :precision binary32 (acosh arg1))

(FPCore () :precision binary32 (atanh 1.0))

(FPCore (arg1) :precision binary32 (atanh arg1))

(FPCore () :precision binary32 (erf 1.0))

(FPCore (arg1) :precision binary32 (erf arg1))

(FPCore () :precision binary32 (erfc 1.0))

(FPCore (arg1) :precision binary32 (erfc arg1))

(FPCore () :precision binary32 (tgamma 1.0))

(FPCore (arg1) :precision binary32 (tgamma arg1))

(FPCore () :precision binary32 (lgamma 1.0))

(FPCore (arg1) :precision binary32 (lgamma arg1))

(FPCore () :precision binary32 (ceil 1.0))

(FPCore (arg1) :precision binary32 (ceil arg1))

(FPCore () :precision binary32 (floor 1.0))

(FPCore (arg1) :precision binary32 (floor arg1))

(FPCore () :precision binary32 (fmod 1.0 1.0))

(FPCore (arg1) :precision binary32 (fmod arg1 1.0))

(FPCore (arg1) :precision binary32 (fmod 1.0 arg1))

(FPCore (arg1) :precision binary32 (fmod arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (fmod arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (fmod arg2 arg1))

(FPCore () :precision binary32 (remainder 1.0 1.0))

(FPCore (arg1) :precision binary32 (remainder arg1 1.0))

(FPCore (arg1) :precision binary32 (remainder 1.0 arg1))

(FPCore (arg1) :precision binary32 (remainder arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (remainder arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (remainder arg2 arg1))

(FPCore () :precision binary32 (fmax 1.0 1.0))

(FPCore (arg1) :precision binary32 (fmax arg1 1.0))

(FPCore (arg1) :precision binary32 (fmax 1.0 arg1))

(FPCore (arg1) :precision binary32 (fmax arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (fmax arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (fmax arg2 arg1))

(FPCore () :precision binary32 (fmin 1.0 1.0))

(FPCore (arg1) :precision binary32 (fmin arg1 1.0))

(FPCore (arg1) :precision binary32 (fmin 1.0 arg1))

(FPCore (arg1) :precision binary32 (fmin arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (fmin arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (fmin arg2 arg1))

(FPCore () :precision binary32 (fdim 1.0 1.0))

(FPCore (arg1) :precision binary32 (fdim arg1 1.0))

(FPCore (arg1) :precision binary32 (fdim 1.0 arg1))

(FPCore (arg1) :precision binary32 (fdim arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (fdim arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (fdim arg2 arg1))

(FPCore () :precision binary32 (copysign 1.0 1.0))

(FPCore (arg1) :precision binary32 (copysign arg1 1.0))

(FPCore (arg1) :precision binary32 (copysign 1.0 arg1))

(FPCore (arg1) :precision binary32 (copysign arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (copysign arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (copysign arg2 arg1))

(FPCore () :precision binary32 (trunc 1.0))

(FPCore (arg1) :precision binary32 (trunc arg1))

(FPCore () :precision binary32 (round 1.0))

(FPCore (arg1) :precision binary32 (round arg1))

(FPCore () :precision binary32 (nearbyint 1.0))

(FPCore (arg1) :precision binary32 (nearbyint arg1))

(FPCore () :precision binary32 (cast 1.0))

(FPCore (arg1) :precision binary32 (cast arg1))

(FPCore () :precision binary32 (if (< 1.0 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (< arg1 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (< 1.0 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (< 1.0 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (< 1.0 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (< arg1 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (< arg1 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (< 1.0 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (< arg1 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (< 1.0 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (< 1.0 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg2) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg1) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 1.0) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 1.0) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 1.0) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 1.0) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 1.0) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (< arg1 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (< arg1 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (< arg1 1.0) arg1 arg1))

(FPCore (arg1) :precision binary32 (if (< 1.0 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg1) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg1) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg2) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg2) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 1.0) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< 1.0 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg2) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg1) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg3) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg1) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg3) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg2) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg2) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg1) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 1.0) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< 1.0 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 1.0) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< 1.0 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg3) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg1) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 1.0) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< 1.0 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 1.0) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< 1.0 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg3) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg2) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 1.0) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< 1.0 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 1.0) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< 1.0 arg3) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (< arg1 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (< arg1 arg2) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (< arg2 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg1 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg2 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (< arg3 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg1 arg2) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg2 arg1) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg1 arg3) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg3 arg1) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg2 arg3) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg3 arg2) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg1 arg2) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg2 arg1) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg1 arg4) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg4 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg2 arg4) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg4 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg1 arg3) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg3 arg1) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg1 arg4) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg4 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg3 arg4) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg4 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg2 arg3) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg3 arg2) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg2 arg4) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg4 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg3 arg4) arg2 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (< arg4 arg3) arg2 arg1))

(FPCore () :precision binary32 (if (> 1.0 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (> arg1 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (> 1.0 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (> 1.0 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (> 1.0 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (> arg1 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (> arg1 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (> 1.0 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (> arg1 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (> 1.0 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (> 1.0 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg2) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg1) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 1.0) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 1.0) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 1.0) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 1.0) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 1.0) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (> arg1 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (> arg1 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (> arg1 1.0) arg1 arg1))

(FPCore (arg1) :precision binary32 (if (> 1.0 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg1) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg1) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg2) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg2) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 1.0) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> 1.0 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg2) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg1) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg3) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg1) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg3) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg2) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg2) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg1) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 1.0) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> 1.0 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 1.0) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> 1.0 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg3) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg1) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 1.0) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> 1.0 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 1.0) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> 1.0 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg3) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg2) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 1.0) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> 1.0 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 1.0) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> 1.0 arg3) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (> arg1 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (> arg1 arg2) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (> arg2 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg1 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg2 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (> arg3 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg1 arg2) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg2 arg1) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg1 arg3) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg3 arg1) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg2 arg3) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg3 arg2) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg1 arg2) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg2 arg1) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg1 arg4) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg4 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg2 arg4) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg4 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg1 arg3) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg3 arg1) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg1 arg4) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg4 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg3 arg4) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg4 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg2 arg3) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg3 arg2) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg2 arg4) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg4 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg3 arg4) arg2 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (> arg4 arg3) arg2 arg1))

(FPCore () :precision binary32 (if (<= 1.0 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (<= arg1 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (<= 1.0 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (<= 1.0 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (<= 1.0 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (<= arg1 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (<= arg1 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (<= 1.0 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (<= arg1 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (<= 1.0 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (<= 1.0 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg2) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg1) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 1.0) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 1.0) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 1.0) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 1.0) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 1.0) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (<= arg1 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (<= arg1 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (<= arg1 1.0) arg1 arg1))

(FPCore (arg1) :precision binary32 (if (<= 1.0 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg1) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg1) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg2) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg2) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 1.0) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= 1.0 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg2) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg1) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg3) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg1) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg3) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg2) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg2) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg1) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 1.0) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= 1.0 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 1.0) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= 1.0 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg3) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg1) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 1.0) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= 1.0 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 1.0) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= 1.0 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg3) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg2) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 1.0) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= 1.0 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 1.0) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= 1.0 arg3) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (<= arg1 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg1 arg2) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (<= arg2 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg1 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg2 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (<= arg3 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg1 arg2) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg2 arg1) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg1 arg3) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg3 arg1) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg2 arg3) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg3 arg2) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg1 arg2) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg2 arg1) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg1 arg4) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg4 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg2 arg4) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg4 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg1 arg3) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg3 arg1) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg1 arg4) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg4 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg3 arg4) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg4 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg2 arg3) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg3 arg2) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg2 arg4) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg4 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg3 arg4) arg2 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (<= arg4 arg3) arg2 arg1))

(FPCore () :precision binary32 (if (>= 1.0 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (>= arg1 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (>= 1.0 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (>= 1.0 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (>= 1.0 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (>= arg1 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (>= arg1 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (>= 1.0 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (>= arg1 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (>= 1.0 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (>= 1.0 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg2) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg1) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 1.0) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 1.0) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 1.0) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 1.0) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 1.0) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (>= arg1 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (>= arg1 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (>= arg1 1.0) arg1 arg1))

(FPCore (arg1) :precision binary32 (if (>= 1.0 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg1) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg1) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg2) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg2) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 1.0) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= 1.0 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg2) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg1) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg3) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg1) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg3) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg2) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg2) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg1) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 1.0) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= 1.0 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 1.0) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= 1.0 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg3) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg1) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 1.0) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= 1.0 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 1.0) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= 1.0 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg3) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg2) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 1.0) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= 1.0 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 1.0) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= 1.0 arg3) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (>= arg1 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg1 arg2) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (>= arg2 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg1 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg2 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (>= arg3 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg1 arg2) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg2 arg1) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg1 arg3) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg3 arg1) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg2 arg3) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg3 arg2) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg1 arg2) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg2 arg1) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg1 arg4) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg4 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg2 arg4) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg4 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg1 arg3) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg3 arg1) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg1 arg4) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg4 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg3 arg4) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg4 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg2 arg3) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg3 arg2) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg2 arg4) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg4 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg3 arg4) arg2 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (>= arg4 arg3) arg2 arg1))

(FPCore () :precision binary32 (if (== 1.0 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (== arg1 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (== 1.0 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (== 1.0 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (== 1.0 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (== arg1 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (== arg1 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (== 1.0 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (== arg1 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (== 1.0 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (== 1.0 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg2) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg1) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 1.0) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 1.0) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 1.0) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 1.0) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 1.0) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (== arg1 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (== arg1 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (== arg1 1.0) arg1 arg1))

(FPCore (arg1) :precision binary32 (if (== 1.0 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg1) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg1) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg2) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg2) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 1.0) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== 1.0 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg2) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg1) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg3) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg1) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg3) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg2) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg2) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg1) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 1.0) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== 1.0 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 1.0) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== 1.0 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg3) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg1) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 1.0) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== 1.0 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 1.0) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== 1.0 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg3) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg2) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 1.0) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== 1.0 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 1.0) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== 1.0 arg3) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (== arg1 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (== arg1 arg2) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (== arg2 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg1 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg2 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (== arg3 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg1 arg2) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg2 arg1) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg1 arg3) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg3 arg1) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg2 arg3) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg3 arg2) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg1 arg2) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg2 arg1) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg1 arg4) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg4 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg2 arg4) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg4 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg1 arg3) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg3 arg1) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg1 arg4) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg4 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg3 arg4) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg4 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg2 arg3) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg3 arg2) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg2 arg4) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg4 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg3 arg4) arg2 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (== arg4 arg3) arg2 arg1))

(FPCore () :precision binary32 (if (!= 1.0 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (!= arg1 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (!= 1.0 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (!= 1.0 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (!= 1.0 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (!= arg1 arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (!= arg1 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (!= 1.0 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (!= arg1 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (!= 1.0 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (!= 1.0 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg2) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg1) 1.0 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 1.0) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 1.0) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 1.0) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 1.0) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 1.0) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (!= arg1 arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (!= arg1 arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (!= arg1 1.0) arg1 arg1))

(FPCore (arg1) :precision binary32 (if (!= 1.0 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg1) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg1) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg2) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg2) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 1.0) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 1.0) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= 1.0 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg2) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg1) arg3 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg3) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg1) arg2 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg3) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg2) arg1 1.0))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg2) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg1) 1.0 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 1.0) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= 1.0 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 1.0) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= 1.0 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg3) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg1) 1.0 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 1.0) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= 1.0 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 1.0) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= 1.0 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg3) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg2) 1.0 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 1.0) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= 1.0 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 1.0) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= 1.0 arg3) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (!= arg1 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg1 arg2) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (!= arg2 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg1) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg1) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg2) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg1) arg2 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg2) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg1) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg1) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg3) arg1 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg1) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg3) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg1 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg3) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg3) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg2) arg3 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg3) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg2) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg2 arg3) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg2) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (!= arg3 arg3) arg2 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg1 arg2) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg2 arg1) arg3 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg1 arg3) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg3 arg1) arg2 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg2 arg3) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg3 arg2) arg1 arg4))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg1 arg2) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg2 arg1) arg4 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg1 arg4) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg4 arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg2 arg4) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg4 arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg1 arg3) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg3 arg1) arg4 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg1 arg4) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg4 arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg3 arg4) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg4 arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg2 arg3) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg3 arg2) arg4 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg2 arg4) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg4 arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg3 arg4) arg2 arg1))

(FPCore (arg1 arg2 arg3 arg4) :precision binary32 (if (!= arg4 arg3) arg2 arg1))

(FPCore () :precision binary32 (if (isfinite 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (isfinite arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (isfinite 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (isfinite 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (isfinite arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (isfinite arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (isfinite 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite 1.0) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (isfinite arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isfinite arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isfinite arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isfinite arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isfinite arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isfinite arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isfinite arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isfinite arg3) arg2 arg1))

(FPCore () :precision binary32 (if (isinf 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (isinf arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (isinf 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (isinf 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (isinf arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (isinf arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (isinf 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isinf arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (isinf arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (isinf arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isinf 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isinf arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isinf 1.0) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (isinf arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isinf arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isinf arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isinf arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isinf arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isinf arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isinf arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isinf arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isinf arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isinf arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isinf arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isinf arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isinf arg3) arg2 arg1))

(FPCore () :precision binary32 (if (isnan 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (isnan arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (isnan 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (isnan 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (isnan arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (isnan arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (isnan 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isnan arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (isnan arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (isnan arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isnan 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isnan arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isnan 1.0) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (isnan arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isnan arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isnan arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isnan arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isnan arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isnan arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isnan arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnan arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnan arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnan arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnan arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnan arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnan arg3) arg2 arg1))

(FPCore () :precision binary32 (if (isnormal 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (isnormal arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (isnormal 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (isnormal 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (isnormal arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (isnormal arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (isnormal 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal 1.0) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (isnormal arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (isnormal arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnormal arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnormal arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnormal arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnormal arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnormal arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (isnormal arg3) arg2 arg1))

(FPCore () :precision binary32 (if (signbit 1.0) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (signbit arg1) 1.0 1.0))

(FPCore (arg1) :precision binary32 (if (signbit 1.0) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (signbit 1.0) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (signbit arg1) arg1 1.0))

(FPCore (arg1) :precision binary32 (if (signbit arg1) 1.0 arg1))

(FPCore (arg1) :precision binary32 (if (signbit 1.0) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (signbit arg1) arg2 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (signbit arg2) arg1 1.0))

(FPCore (arg1 arg2) :precision binary32 (if (signbit arg1) 1.0 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (signbit 1.0) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (signbit arg2) 1.0 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (signbit 1.0) arg2 arg1))

(FPCore (arg1) :precision binary32 (if (signbit arg1) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (signbit arg1) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (signbit arg1) arg2 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (signbit arg2) arg1 arg1))

(FPCore (arg1 arg2) :precision binary32 (if (signbit arg1) arg2 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (signbit arg2) arg1 arg2))

(FPCore (arg1 arg2) :precision binary32 (if (signbit arg2) arg2 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (signbit arg1) arg2 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (signbit arg2) arg1 arg3))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (signbit arg1) arg3 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (signbit arg3) arg1 arg2))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (signbit arg2) arg3 arg1))

(FPCore (arg1 arg2 arg3) :precision binary32 (if (signbit arg3) arg2 arg1))

(FPCore () :precision binary32 (let ((x1 1.0)) x1))

(FPCore (arg1) :precision binary32 (let ((x1 arg1)) x1))

(FPCore () :precision binary32 (let* ((x2 1.0)) x2))

(FPCore (arg1) :precision binary32 (let* ((x2 arg1)) x2))

(FPCore () :precision binary32 (while (< x3 1.0) ((x3 1.0 x3)) x3))

(FPCore (arg1) :precision binary32 (while (< x3 arg1) ((x3 1.0 x3)) x3))

(FPCore (arg1) :precision binary32 (while (< x3 1.0) ((x3 arg1 x3)) x3))

(FPCore (arg1) :precision binary32 (while (< x3 arg1) ((x3 arg1 x3)) x3))

(FPCore (arg1 arg2) :precision binary32 (while (< x3 arg1) ((x3 arg2 x3)) x3))

(FPCore (arg1 arg2) :precision binary32 (while (< x3 arg2) ((x3 arg1 x3)) x3))

(FPCore () :precision binary32 (while (< 1.0 x3) ((x3 1.0 x3)) x3))

(FPCore (arg1) :precision binary32 (while (< arg1 x3) ((x3 1.0 x3)) x3))

(FPCore (arg1) :precision binary32 (while (< 1.0 x3) ((x3 arg1 x3)) x3))

(FPCore (arg1) :precision binary32 (while (< arg1 x3) ((x3 arg1 x3)) x3))

(FPCore (arg1 arg2) :precision binary32 (while (< arg1 x3) ((x3 arg2 x3)) x3))

(FPCore (arg1 arg2) :precision binary32 (while (< arg2 x3) ((x3 arg1 x3)) x3))

(FPCore () :precision binary32 (while (< x3 x3) ((x3 1.0 x3)) x3))

(FPCore (arg1) :precision binary32 (while (< x3 x3) ((x3 arg1 x3)) x3))

(FPCore () :precision binary32 (while (> x4 1.0) ((x4 1.0 x4)) x4))

(FPCore (arg1) :precision binary32 (while (> x4 arg1) ((x4 1.0 x4)) x4))

(FPCore (arg1) :precision binary32 (while (> x4 1.0) ((x4 arg1 x4)) x4))

(FPCore (arg1) :precision binary32 (while (> x4 arg1) ((x4 arg1 x4)) x4))

(FPCore (arg1 arg2) :precision binary32 (while (> x4 arg1) ((x4 arg2 x4)) x4))

(FPCore (arg1 arg2) :precision binary32 (while (> x4 arg2) ((x4 arg1 x4)) x4))

(FPCore () :precision binary32 (while (> 1.0 x4) ((x4 1.0 x4)) x4))

(FPCore (arg1) :precision binary32 (while (> arg1 x4) ((x4 1.0 x4)) x4))

(FPCore (arg1) :precision binary32 (while (> 1.0 x4) ((x4 arg1 x4)) x4))

(FPCore (arg1) :precision binary32 (while (> arg1 x4) ((x4 arg1 x4)) x4))

(FPCore (arg1 arg2) :precision binary32 (while (> arg1 x4) ((x4 arg2 x4)) x4))

(FPCore (arg1 arg2) :precision binary32 (while (> arg2 x4) ((x4 arg1 x4)) x4))

(FPCore () :precision binary32 (while (> x4 x4) ((x4 1.0 x4)) x4))

(FPCore (arg1) :precision binary32 (while (> x4 x4) ((x4 arg1 x4)) x4))

(FPCore () :precision binary32 (while (<= x5 1.0) ((x5 1.0 x5)) x5))

(FPCore (arg1) :precision binary32 (while (<= x5 arg1) ((x5 1.0 x5)) x5))

(FPCore (arg1) :precision binary32 (while (<= x5 1.0) ((x5 arg1 x5)) x5))

(FPCore (arg1) :precision binary32 (while (<= x5 arg1) ((x5 arg1 x5)) x5))

(FPCore (arg1 arg2) :precision binary32 (while (<= x5 arg1) ((x5 arg2 x5)) x5))

(FPCore (arg1 arg2) :precision binary32 (while (<= x5 arg2) ((x5 arg1 x5)) x5))

(FPCore () :precision binary32 (while (<= 1.0 x5) ((x5 1.0 x5)) x5))

(FPCore (arg1) :precision binary32 (while (<= arg1 x5) ((x5 1.0 x5)) x5))

(FPCore (arg1) :precision binary32 (while (<= 1.0 x5) ((x5 arg1 x5)) x5))

(FPCore (arg1) :precision binary32 (while (<= arg1 x5) ((x5 arg1 x5)) x5))

(FPCore (arg1 arg2) :precision binary32 (while (<= arg1 x5) ((x5 arg2 x5)) x5))

(FPCore (arg1 arg2) :precision binary32 (while (<= arg2 x5) ((x5 arg1 x5)) x5))

(FPCore () :precision binary32 (while (<= x5 x5) ((x5 1.0 x5)) x5))

(FPCore (arg1) :precision binary32 (while (<= x5 x5) ((x5 arg1 x5)) x5))

(FPCore () :precision binary32 (while (>= x6 1.0) ((x6 1.0 x6)) x6))

(FPCore (arg1) :precision binary32 (while (>= x6 arg1) ((x6 1.0 x6)) x6))

(FPCore (arg1) :precision binary32 (while (>= x6 1.0) ((x6 arg1 x6)) x6))

(FPCore (arg1) :precision binary32 (while (>= x6 arg1) ((x6 arg1 x6)) x6))

(FPCore (arg1 arg2) :precision binary32 (while (>= x6 arg1) ((x6 arg2 x6)) x6))

(FPCore (arg1 arg2) :precision binary32 (while (>= x6 arg2) ((x6 arg1 x6)) x6))

(FPCore () :precision binary32 (while (>= 1.0 x6) ((x6 1.0 x6)) x6))

(FPCore (arg1) :precision binary32 (while (>= arg1 x6) ((x6 1.0 x6)) x6))

(FPCore (arg1) :precision binary32 (while (>= 1.0 x6) ((x6 arg1 x6)) x6))

(FPCore (arg1) :precision binary32 (while (>= arg1 x6) ((x6 arg1 x6)) x6))

(FPCore (arg1 arg2) :precision binary32 (while (>= arg1 x6) ((x6 arg2 x6)) x6))

(FPCore (arg1 arg2) :precision binary32 (while (>= arg2 x6) ((x6 arg1 x6)) x6))

(FPCore () :precision binary32 (while (>= x6 x6) ((x6 1.0 x6)) x6))

(FPCore (arg1) :precision binary32 (while (>= x6 x6) ((x6 arg1 x6)) x6))

(FPCore () :precision binary32 (while (== x7 1.0) ((x7 1.0 x7)) x7))

(FPCore (arg1) :precision binary32 (while (== x7 arg1) ((x7 1.0 x7)) x7))

(FPCore (arg1) :precision binary32 (while (== x7 1.0) ((x7 arg1 x7)) x7))

(FPCore (arg1) :precision binary32 (while (== x7 arg1) ((x7 arg1 x7)) x7))

(FPCore (arg1 arg2) :precision binary32 (while (== x7 arg1) ((x7 arg2 x7)) x7))

(FPCore (arg1 arg2) :precision binary32 (while (== x7 arg2) ((x7 arg1 x7)) x7))

(FPCore () :precision binary32 (while (== 1.0 x7) ((x7 1.0 x7)) x7))

(FPCore (arg1) :precision binary32 (while (== arg1 x7) ((x7 1.0 x7)) x7))

(FPCore (arg1) :precision binary32 (while (== 1.0 x7) ((x7 arg1 x7)) x7))

(FPCore (arg1) :precision binary32 (while (== arg1 x7) ((x7 arg1 x7)) x7))

(FPCore (arg1 arg2) :precision binary32 (while (== arg1 x7) ((x7 arg2 x7)) x7))

(FPCore (arg1 arg2) :precision binary32 (while (== arg2 x7) ((x7 arg1 x7)) x7))

(FPCore () :precision binary32 (while (== x7 x7) ((x7 1.0 x7)) x7))

(FPCore (arg1) :precision binary32 (while (== x7 x7) ((x7 arg1 x7)) x7))

(FPCore () :precision binary32 (while (!= x8 1.0) ((x8 1.0 x8)) x8))

(FPCore (arg1) :precision binary32 (while (!= x8 arg1) ((x8 1.0 x8)) x8))

(FPCore (arg1) :precision binary32 (while (!= x8 1.0) ((x8 arg1 x8)) x8))

(FPCore (arg1) :precision binary32 (while (!= x8 arg1) ((x8 arg1 x8)) x8))

(FPCore (arg1 arg2) :precision binary32 (while (!= x8 arg1) ((x8 arg2 x8)) x8))

(FPCore (arg1 arg2) :precision binary32 (while (!= x8 arg2) ((x8 arg1 x8)) x8))

(FPCore () :precision binary32 (while (!= 1.0 x8) ((x8 1.0 x8)) x8))

(FPCore (arg1) :precision binary32 (while (!= arg1 x8) ((x8 1.0 x8)) x8))

(FPCore (arg1) :precision binary32 (while (!= 1.0 x8) ((x8 arg1 x8)) x8))

(FPCore (arg1) :precision binary32 (while (!= arg1 x8) ((x8 arg1 x8)) x8))

(FPCore (arg1 arg2) :precision binary32 (while (!= arg1 x8) ((x8 arg2 x8)) x8))

(FPCore (arg1 arg2) :precision binary32 (while (!= arg2 x8) ((x8 arg1 x8)) x8))

(FPCore () :precision binary32 (while (!= x8 x8) ((x8 1.0 x8)) x8))

(FPCore (arg1) :precision binary32 (while (!= x8 x8) ((x8 arg1 x8)) x8))

(FPCore () :precision binary32 (while (isfinite x9) ((x9 1.0 x9)) x9))

(FPCore (arg1) :precision binary32 (while (isfinite x9) ((x9 arg1 x9)) x9))

(FPCore () :precision binary32 (while (isinf x10) ((x10 1.0 x10)) x10))

(FPCore (arg1) :precision binary32 (while (isinf x10) ((x10 arg1 x10)) x10))

(FPCore () :precision binary32 (while (isnan x11) ((x11 1.0 x11)) x11))

(FPCore (arg1) :precision binary32 (while (isnan x11) ((x11 arg1 x11)) x11))

(FPCore () :precision binary32 (while (isnormal x12) ((x12 1.0 x12)) x12))

(FPCore (arg1) :precision binary32 (while (isnormal x12) ((x12 arg1 x12)) x12))

(FPCore () :precision binary32 (while (signbit x13) ((x13 1.0 x13)) x13))

(FPCore (arg1) :precision binary32 (while (signbit x13) ((x13 arg1 x13)) x13))

(FPCore () :precision binary32 (while* (< x14 1.0) ((x14 1.0 x14)) x14))

(FPCore (arg1) :precision binary32 (while* (< x14 arg1) ((x14 1.0 x14)) x14))

(FPCore (arg1) :precision binary32 (while* (< x14 1.0) ((x14 arg1 x14)) x14))

(FPCore (arg1) :precision binary32 (while* (< x14 arg1) ((x14 arg1 x14)) x14))

(FPCore (arg1 arg2) :precision binary32 (while* (< x14 arg1) ((x14 arg2 x14)) x14))

(FPCore (arg1 arg2) :precision binary32 (while* (< x14 arg2) ((x14 arg1 x14)) x14))

(FPCore () :precision binary32 (while* (< 1.0 x14) ((x14 1.0 x14)) x14))

(FPCore (arg1) :precision binary32 (while* (< arg1 x14) ((x14 1.0 x14)) x14))

(FPCore (arg1) :precision binary32 (while* (< 1.0 x14) ((x14 arg1 x14)) x14))

(FPCore (arg1) :precision binary32 (while* (< arg1 x14) ((x14 arg1 x14)) x14))

(FPCore (arg1 arg2) :precision binary32 (while* (< arg1 x14) ((x14 arg2 x14)) x14))

(FPCore (arg1 arg2) :precision binary32 (while* (< arg2 x14) ((x14 arg1 x14)) x14))

(FPCore () :precision binary32 (while* (< x14 x14) ((x14 1.0 x14)) x14))

(FPCore (arg1) :precision binary32 (while* (< x14 x14) ((x14 arg1 x14)) x14))

(FPCore () :precision binary32 (while* (> x15 1.0) ((x15 1.0 x15)) x15))

(FPCore (arg1) :precision binary32 (while* (> x15 arg1) ((x15 1.0 x15)) x15))

(FPCore (arg1) :precision binary32 (while* (> x15 1.0) ((x15 arg1 x15)) x15))

(FPCore (arg1) :precision binary32 (while* (> x15 arg1) ((x15 arg1 x15)) x15))

(FPCore (arg1 arg2) :precision binary32 (while* (> x15 arg1) ((x15 arg2 x15)) x15))

(FPCore (arg1 arg2) :precision binary32 (while* (> x15 arg2) ((x15 arg1 x15)) x15))

(FPCore () :precision binary32 (while* (> 1.0 x15) ((x15 1.0 x15)) x15))

(FPCore (arg1) :precision binary32 (while* (> arg1 x15) ((x15 1.0 x15)) x15))

(FPCore (arg1) :precision binary32 (while* (> 1.0 x15) ((x15 arg1 x15)) x15))

(FPCore (arg1) :precision binary32 (while* (> arg1 x15) ((x15 arg1 x15)) x15))

(FPCore (arg1 arg2) :precision binary32 (while* (> arg1 x15) ((x15 arg2 x15)) x15))

(FPCore (arg1 arg2) :precision binary32 (while* (> arg2 x15) ((x15 arg1 x15)) x15))

(FPCore () :precision binary32 (while* (> x15 x15) ((x15 1.0 x15)) x15))

(FPCore (arg1) :precision binary32 (while* (> x15 x15) ((x15 arg1 x15)) x15))

(FPCore () :precision binary32 (while* (<= x16 1.0) ((x16 1.0 x16)) x16))

(FPCore (arg1) :precision binary32 (while* (<= x16 arg1) ((x16 1.0 x16)) x16))

(FPCore (arg1) :precision binary32 (while* (<= x16 1.0) ((x16 arg1 x16)) x16))

(FPCore (arg1) :precision binary32 (while* (<= x16 arg1) ((x16 arg1 x16)) x16))

(FPCore (arg1 arg2) :precision binary32 (while* (<= x16 arg1) ((x16 arg2 x16)) x16))

(FPCore (arg1 arg2) :precision binary32 (while* (<= x16 arg2) ((x16 arg1 x16)) x16))

(FPCore () :precision binary32 (while* (<= 1.0 x16) ((x16 1.0 x16)) x16))

(FPCore (arg1) :precision binary32 (while* (<= arg1 x16) ((x16 1.0 x16)) x16))

(FPCore (arg1) :precision binary32 (while* (<= 1.0 x16) ((x16 arg1 x16)) x16))

(FPCore (arg1) :precision binary32 (while* (<= arg1 x16) ((x16 arg1 x16)) x16))

(FPCore (arg1 arg2) :precision binary32 (while* (<= arg1 x16) ((x16 arg2 x16)) x16))

(FPCore (arg1 arg2) :precision binary32 (while* (<= arg2 x16) ((x16 arg1 x16)) x16))

(FPCore () :precision binary32 (while* (<= x16 x16) ((x16 1.0 x16)) x16))

(FPCore (arg1) :precision binary32 (while* (<= x16 x16) ((x16 arg1 x16)) x16))

(FPCore () :precision binary32 (while* (>= x17 1.0) ((x17 1.0 x17)) x17))

(FPCore (arg1) :precision binary32 (while* (>= x17 arg1) ((x17 1.0 x17)) x17))

(FPCore (arg1) :precision binary32 (while* (>= x17 1.0) ((x17 arg1 x17)) x17))

(FPCore (arg1) :precision binary32 (while* (>= x17 arg1) ((x17 arg1 x17)) x17))

(FPCore (arg1 arg2) :precision binary32 (while* (>= x17 arg1) ((x17 arg2 x17)) x17))

(FPCore (arg1 arg2) :precision binary32 (while* (>= x17 arg2) ((x17 arg1 x17)) x17))

(FPCore () :precision binary32 (while* (>= 1.0 x17) ((x17 1.0 x17)) x17))

(FPCore (arg1) :precision binary32 (while* (>= arg1 x17) ((x17 1.0 x17)) x17))

(FPCore (arg1) :precision binary32 (while* (>= 1.0 x17) ((x17 arg1 x17)) x17))

(FPCore (arg1) :precision binary32 (while* (>= arg1 x17) ((x17 arg1 x17)) x17))

(FPCore (arg1 arg2) :precision binary32 (while* (>= arg1 x17) ((x17 arg2 x17)) x17))

(FPCore (arg1 arg2) :precision binary32 (while* (>= arg2 x17) ((x17 arg1 x17)) x17))

(FPCore () :precision binary32 (while* (>= x17 x17) ((x17 1.0 x17)) x17))

(FPCore (arg1) :precision binary32 (while* (>= x17 x17) ((x17 arg1 x17)) x17))

(FPCore () :precision binary32 (while* (== x18 1.0) ((x18 1.0 x18)) x18))

(FPCore (arg1) :precision binary32 (while* (== x18 arg1) ((x18 1.0 x18)) x18))

(FPCore (arg1) :precision binary32 (while* (== x18 1.0) ((x18 arg1 x18)) x18))

(FPCore (arg1) :precision binary32 (while* (== x18 arg1) ((x18 arg1 x18)) x18))

(FPCore (arg1 arg2) :precision binary32 (while* (== x18 arg1) ((x18 arg2 x18)) x18))

(FPCore (arg1 arg2) :precision binary32 (while* (== x18 arg2) ((x18 arg1 x18)) x18))

(FPCore () :precision binary32 (while* (== 1.0 x18) ((x18 1.0 x18)) x18))

(FPCore (arg1) :precision binary32 (while* (== arg1 x18) ((x18 1.0 x18)) x18))

(FPCore (arg1) :precision binary32 (while* (== 1.0 x18) ((x18 arg1 x18)) x18))

(FPCore (arg1) :precision binary32 (while* (== arg1 x18) ((x18 arg1 x18)) x18))

(FPCore (arg1 arg2) :precision binary32 (while* (== arg1 x18) ((x18 arg2 x18)) x18))

(FPCore (arg1 arg2) :precision binary32 (while* (== arg2 x18) ((x18 arg1 x18)) x18))

(FPCore () :precision binary32 (while* (== x18 x18) ((x18 1.0 x18)) x18))

(FPCore (arg1) :precision binary32 (while* (== x18 x18) ((x18 arg1 x18)) x18))

(FPCore () :precision binary32 (while* (!= x19 1.0) ((x19 1.0 x19)) x19))

(FPCore (arg1) :precision binary32 (while* (!= x19 arg1) ((x19 1.0 x19)) x19))

(FPCore (arg1) :precision binary32 (while* (!= x19 1.0) ((x19 arg1 x19)) x19))

(FPCore (arg1) :precision binary32 (while* (!= x19 arg1) ((x19 arg1 x19)) x19))

(FPCore (arg1 arg2) :precision binary32 (while* (!= x19 arg1) ((x19 arg2 x19)) x19))

(FPCore (arg1 arg2) :precision binary32 (while* (!= x19 arg2) ((x19 arg1 x19)) x19))

(FPCore () :precision binary32 (while* (!= 1.0 x19) ((x19 1.0 x19)) x19))

(FPCore (arg1) :precision binary32 (while* (!= arg1 x19) ((x19 1.0 x19)) x19))

(FPCore (arg1) :precision binary32 (while* (!= 1.0 x19) ((x19 arg1 x19)) x19))

(FPCore (arg1) :precision binary32 (while* (!= arg1 x19) ((x19 arg1 x19)) x19))

(FPCore (arg1 arg2) :precision binary32 (while* (!= arg1 x19) ((x19 arg2 x19)) x19))

(FPCore (arg1 arg2) :precision binary32 (while* (!= arg2 x19) ((x19 arg1 x19)) x19))

(FPCore () :precision binary32 (while* (!= x19 x19) ((x19 1.0 x19)) x19))

(FPCore (arg1) :precision binary32 (while* (!= x19 x19) ((x19 arg1 x19)) x19))

(FPCore () :precision binary32 (while* (isfinite x20) ((x20 1.0 x20)) x20))

(FPCore (arg1) :precision binary32 (while* (isfinite x20) ((x20 arg1 x20)) x20))

(FPCore () :precision binary32 (while* (isinf x21) ((x21 1.0 x21)) x21))

(FPCore (arg1) :precision binary32 (while* (isinf x21) ((x21 arg1 x21)) x21))

(FPCore () :precision binary32 (while* (isnan x22) ((x22 1.0 x22)) x22))

(FPCore (arg1) :precision binary32 (while* (isnan x22) ((x22 arg1 x22)) x22))

(FPCore () :precision binary32 (while* (isnormal x23) ((x23 1.0 x23)) x23))

(FPCore (arg1) :precision binary32 (while* (isnormal x23) ((x23 arg1 x23)) x23))

(FPCore () :precision binary32 (while* (signbit x24) ((x24 1.0 x24)) x24))

(FPCore (arg1) :precision binary32 (while* (signbit x24) ((x24 arg1 x24)) x24))

