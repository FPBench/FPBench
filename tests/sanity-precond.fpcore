;; Sampling by range table

(FPCore (x) :name "Single interval (1/4)" :pre (< 1 x 1.000001) :spec 1.0 (if (< 1 x 1.000001) 1 0))

(FPCore (x) :name "Single interval (2/4)" :pre (< -1e-320 x 1e-320) :precision binary64 :spec 1.0 (if (< -1e-320 x 1e-320) 1 0))

(FPCore (x) :name "Single interval (3/4)" :pre (< 1.797693134862315e308 x INFINITY) :precision binary64 :spec 1.0 (if (< 1.797693134862315e308 x INFINITY) 1 0))

(FPCore (x) :name "Single interval (4/4)" :pre (== x 1) :spec 1.0 (if (== x 1) 1 0))

(FPCore (x) :name "Multiple intervals (1/1)" :pre (or (< -5 x -1) (< 1 x 5)) :spec 1.0 (if (not (<= -1 x 1)) 1 0))

(FPCore (x) :name "Multiple intervals (1/2)" :pre (or (< 1 x 1.00001) (< 1.7e308 x INFINITY)) :spec 1.0 (if (not (<= -1 x 1)) 1 0))

;; Sampling by rejection

(FPCore (x y) :name "Dependent intervals (1/3)" :pre (< x y) :spec 1.0 (if (< x y) 1 0))

(FPCore (x y) :name "Dependent intervals (2/3)" :pre (< 1 x y 1.00001) :spec 1.0 (if (< x y) 1 0))

(FPCore (x y) :name "Dependent intervals (3/3)" :pre (== x y) :spec 1.0 (if (< x y) 1 0))

(FPCore (x) :name "Extra intervals (1/1)" :pre (< (pow x 2) 1) :spec 1.0 (if (< -1 x 1) 1 0))