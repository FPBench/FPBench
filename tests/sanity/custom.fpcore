; -*- mode: scheme -*-

(FPCore ()
        :name "Test let (1/5)"
        :spec 1.0
        (let ([a 1.0]) a))

(FPCore ()
        :name "Test let (2/5)"
        :spec 2.0
        (let ([a 1.0] [b 1.0]) (+ a b)))

(FPCore ()
        :name "Test let (3/5)"
        :spec -1.0
        (let ([a 1.0] [b 0.0] [c -1.0] [d 0])
          (if (> a b) c d)))

(FPCore ()
        :name "Test let (4/5)"
        :spec 1.0
        (let ([a 1.0] [b 0.0])
          (let ([a b] [b a])
            b)))

(FPCore ()
        :name "Test let (5/5)"
        :spec 0.0
        (let ([a 1.0] [b 0.0])
          (let ([a b] [b a])
            (let ([a b] [b a])
              b))))

(FPCore ()
        :name "Test let* (1/5)"
        :spec 1.0
        (let* ([a 1.0]) a))

(FPCore ()
        :name "Test let* (2/5)"
        :spec 0.0
        (let* ([a 1.0] [b -1.0]) (+ a b)))

(FPCore ()
        :name "Test let* (3/5)"
        :spec -1.0
        (let* ([a 1.0] [b 0.0] [c -1.0] [d 0])
          (if (> a b) c d)))

(FPCore ()
        :name "Test let* (4/5)"
        :spec 1.0
        (let* ([a 1.0] [b a])
          b))

(FPCore ()
        :name "Test let* (5/5)"
        :spec 5.0
        (let* ([a 3.0] [b 1.0] [c -1.0])
          (let* ([b a] [c (+ c (+ b a))])
            (let* ([a c] [b a])
              b))))

(FPCore ()
        :name "Test while (1/7)"
        :spec 0.0
        (while FALSE ([a 0.0 (+ a 1.0)]) a))

(FPCore ()
        :name "Test while (2/7)"
        :spec 4.0
        (while (< a 4) ([a 0.0 (+ a 1.0)]) a))

(FPCore ()
        :name "Test while (3/7)"
        :spec 8.0
        (while (< a 3)
               ([a 0.0 (+ a 1.0)]
                [b 1.0 (* b 2.0)])
               b))

(FPCore ()
        :name "Test while (4/7)"
        :spec -6.0
        (while (<= a 3)
               ([a 0.0 (+ a 1.0)]
                [b 0.0 (- b a)])
               b))

(FPCore ()
        :name "Test while (5/7)"
        :spec 1.0
        (while (< i 3)
               ([i 0 (+ i 1)]
                [a 0.0 b]
                [b 1.0 a])
               a))

(FPCore ()
        :name "Test while (6/7)"
        :spec 0.0
        (while (< i 4)
               ([i 0 (+ i 1)]
                [a 0.0 b]
                [b 1.0 a])
               a))

(FPCore ()
        :name "Test while (7/7)"
        :spec 6.0
        (while (<= a 3)
               ([a 0.0 (+ a 1.0)]
                [b 0.0 (while (<= i a)
                              ([i 0 (+ i 1)]
                               [x 0.0 (+ x i)])
                              x)])
               b))

(FPCore ()
        :name "Test while* (1/7)"
        :spec 0.0
        (while* FALSE ([a 0.0 (+ a 1.0)]) a))

(FPCore ()
        :name "Test while* (2/7)"
        :spec 4.0
        (while* (< a 4) ([a 0.0 (+ a 1.0)]) a))

(FPCore ()
        :name "Test while* (3/7)"
        :spec 8.0
        (while* (< a 3)
                ([a 0.0 (+ a 1.0)]
                 [b 1.0 (* b 2.0)])
                b))

(FPCore ()
        :name "Test while* (4/7)"
        :spec -10.0
        (while* (<= a 3)
                ([a 0.0 (+ a 1.0)]
                 [b 0.0 (- b a)])
                b))

(FPCore ()
        :name "Test while* (5/7)"
        :spec 1.0
        (while* (< i 3)
                ([i 0.0 (+ i 1)]
                 [a 0.0 b]
                 [b 1.0 a])
                a))

(FPCore ()
        :name "Test while* (6/7)"
        :spec 1.0
        (while* (< i 4)
                ([i 0.0 (+ i 1)]
                 [a 0.0 b]
                 [b 1.0 a])
                a))

(FPCore ()
        :name "Test while* (7/7)"
        :spec 15.0
        (while* (<= a 3)
                ([a 0.0 (+ a 1.0)]
                 [b 0.0 (while* (<= i a)
                                ([i 0 (+ i 1)]
                                 [x 0.0 (+ x i)])
                                x)])
                b))

(FPCore ()
  :name "Test if (1/6)"
  :spec 1.0
  (if (> 1.0 0.0) 1.0 0.0))

(FPCore ()
  :name "Test if (2/6)"
  :spec 1.0
  (if (< 1.0 0.0) 0.0 1.0))

(FPCore (x)
 :name "Test if (3/6)"
 (if TRUE (let ([y 1]) y)
  (if FALSE (let ([y 2]) y)
   (let ([y 3]) y))))

(FPCore (x)
  :name "Test if (4/6)"
  (if TRUE x (if (let ([t FALSE]) t) x x)))

(FPCore (x)
  :name "Test if (5/6)"
  (if (let ([t FALSE]) t) 0
   (if (let ([t TRUE]) t) 1
    (if (let ([t TRUE]) t) 0 0))))

(FPCore (x)
  :name "Test if (6/6)"
  (if TRUE x (if (let ([t (let ([y x]) (> x y))]) t) 1 0)))

(FPCore ()
  :name "Test cast (1/1)"
  :spec 1.0
  (cast 1.0))

(FPCore () 
  :name "Test ! (1/1)" 
  :spec 1.0
  (! :precision binary64 :round nearestEven 1.0))

(FPCore ident ()
  :name "Test FPCore identifier (FPBench 2.0)"
  :spec 1.0
  1.0)